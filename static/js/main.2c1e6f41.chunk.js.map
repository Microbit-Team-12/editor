{"version":3,"sources":["api/microbit/interface/message.ts","api/microbit/interface/config.ts","api/microbit/impl/helper/parser.ts","api/microbit/impl/helper/reader.ts","api/microbit/impl/interact.ts","api/microbit/impl/connect.ts","resources/Duck.jpg","duck-code.tsx","components/TutorialViewer.tsx","components/APIDemo.tsx","index.tsx"],"names":["MicrobitState","defaultConfig","connectOption","baudRate","dataBits","stopBits","parity","bufferSize","flowControl","requestOption","filters","usbVendorId","readOption","showLog","updateMs","cutLength","signalOption","replLineReady","executionDone","executionStart","mainPYException","execException","waitMsBeforeReboot","SerialParser","portReader","config","startSignals","endSignals","this","safeReadUntil","outputStream","a","console","log","safeReadUntilWithUpdate","str","readErrors","result","write","kind","outputChunk","end","unsafeReadline","line1","lineNumberString","split","lineCount","messageLine","startsWith","line2split","line","parseInt","type","message","length","SerialReader","serialBuffer","termination","read","value","bufferLimit","len","substring","token","index","indexOf","before","substr","readLoop","includes","splitBufferOnFirst","readLoopWithCut","tokens","update","bufferUpdated","matchedTokenID","forEach","updateTimer","setInterval","clearInterval","ConnectedMicrobitInteract","port","portWriter","portParser","signal","state","portWriterStreamClosed","portReaderStreamClosed","Free","writable","encoder","TextEncoderStream","readable","pipeTo","catch","_","getWriter","decoder","TextDecoderStream","getReader","portReaderHelper","code","replace","readUntilNewREPLLine","Busy","Error","codeInPythonString","codeToPythonString","Stream","getREPLLine","readUntilExecStart","readUntilExecDone","then","cond","Promise","resolve","reject","timer","waitUntil","cancel","abort","close","createConnection","open","reason","portInteract","interact","disconnection","addEventListener","onDisconnect","removeEventListener","connectBySelection","navigator","serial","requestPort","connectByPariedDevice","getPorts","ports","connectByPlugIn","checkUSBInfo","info","undefined","f","usbProductId","waitForPort","event","target","getInfo","theme","createMuiTheme","palette","primary","main","useStyles","makeStyles","button","flexGrow","border","borderRadius","color","height","padding","spacing","margin","textAlign","textTransform","xButton","backgroundColor","speech","prevSlideParams","jsonData","require","slideNames","Object","keys","tutorials","executeCorrespondingCommand","commandString","props","href","rel","lineNumber","lineText","strippedCodeLine","trim","strippedTutorialLines","map","x","Fuse","includeMatches","isCaseSensitive","search","closestLine","refIndex","Typography","variant","item","readableDiffMessage","readableErrorLineNumber","parseSpeech","filter","Boolean","parsedCommand","slice","parseTextCommand","StartSlides","initialSlide","classes","useState","slide","setSlide","width","src","duck","alt","size","className","Grid","container","justify","alignItems","buttons","xs","ThemeProvider","Button","onClick","link","params","closeDuck","text","MakeButtons","PythonCode","isExpandable","highlightStart","highlightEnd","lines","highlightedLines","fragments","isLineNumberValid","name","maxValue","isNaN","alert","lineNumbers","start","isExpanded","output","setState","onRun","oldOutput","onInsertIntoEditor","join","style","darcula","language","showLineNumbers","getDisplayedText","endIcon","Visibility","VisibilityOff","onToggleExpand","bind","startIcon","PlayArrow","disabled","hasFreeConnection","DoubleArrow","React","Component","TutorialViewer","renderers","renderCode","markdown","APIDemo","tutorial","connection","editor","monaco","needDuck","errorString","errorLine","errorMonacoIDs","loader","init","t","removeErrorLineOfCode","fetch","r","disconnect","callback","isEnabled","Box","paddingLeft","getState","exileDuck","getValue","renderDuck","onRunCell","defaultLanguage","defaultValue","onMount","handleEditorDidMount","options","minimap","enabled","fontSize","wrapperClassName","readOnly","renderHeaderButton","onStart","onFlash","onInterrupt","hasBusyConnection","onReboot","summonDuck","renderTutorial","renderEditor","renderOutput","c","connect","codeSnippet","selection","getSelection","position","getPosition","range","startLineNumber","endLineNumber","startColumn","column","endColumn","getModel","pushEditOperations","focus","ids","deltaDecorations","errorMonacoID","isWholeLine","flash","onExec","execute","reboot","interrupt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c1e6f41.chunk.js","sourcesContent":["import { ConnectedMicrobitInteract } from '../impl/interact';\n\n/**\n * A description of connection failure\n*/\nexport interface FailedConnection {\n  readonly kind: 'ConnectionFailure',\n  readonly type: 'Failed to Obtain Port' | 'Failed to Open Port' | 'Port No Response'\n  readonly reason: string\n}\n\nexport interface MicrobitConnection {\n  readonly kind: 'MicrobitConnection'\n  /**\n   * An object that allows us to interact with the connected micro:bit.\n   */\n  readonly interact: ConnectedMicrobitInteract\n\n  /**\n   * A promise that completes when the micro:bit connection is no longer active.\n   * This promise itself does not try to disconnect micro:bit.\n   */\n  readonly disconnection: Promise<void>\n}\n\nexport enum MicrobitState{\n  /**\n   * Nothing is running,\n   * \n   * Allowed: flash/execute/reboot\n   * \n   * Not Allowed: interrupt\n   */\n  Free,\n  /**\n   * Code is running,\n   * \n   * Allowed: Interrupt\n   * \n   * Not Allowed: flash/execute/reboot\n   */\n  Busy\n}\n\n/**\n * Data that we expect to receive from micro:bit as a result of execututing the flashed code.\n */\nexport type MicrobitOutput = NormalOutput | ErrorMessage | ResetPressed\n\n/**\n * A piece of content that is output to the standard output of micro:bit.\n */\nexport interface NormalOutput {\n  readonly kind: 'NormalOutput'\n  /**\n   * outputChunk is a new piece of output we have obtained from micro:bit,\n   * and may not correspond to a single print() executed on the device.\n   */\n  readonly outputChunk: string\n}\n\n/**\n * An object indicate reset button is pressed on the microbit\n * \n * OutputStream will continue to output\n */\nexport interface ResetPressed{\n  readonly kind: 'ResetPressed'\n}\n\nexport type MicroPythonExceptionType = 'AssertionError'\n  | 'AttributeError'\n  | 'Exception'\n  | 'ImportError'\n  | 'IndexError'\n  | 'KeyboardInterrupt'\n  | 'KeyError'\n  | 'MemoryError'\n  | 'NameError'\n  | 'NotImplementedError'\n  | 'OSError'\n  | 'RuntimeError'\n  | 'StopIteration'\n  | 'SyntaxError'\n  | 'SystemExit'\n  | 'TypeError'\n  | 'ValueError'\n  | 'ZeroDivisionError'\n  | 'IndentationError'\n\n/**\n * A description of a runtime error that occured on micro:bit\n */\nexport interface ErrorMessage {\n  readonly kind: 'ErrorMessage'\n  /**\n   * A integer indicating in which line of user code the error occurs\n   */\n  readonly line: number\n  /**\n   * A string indicating type of the exception\n   * For full list of types, see\n   * https://docs.micropython.org/en/latest/library/builtins.html#exceptions\n   */\n  readonly type: MicroPythonExceptionType\n  /**\n   * A *simple* explanation of the error\n   */\n  readonly message: string\n}\n","//TODO: Rename\n\nexport interface ManagerOption {\n  /**\n   * Parameter used to connect serial port. See `SerialOptions`\n   */\n  connectOption: SerialOptions\n  /**\n   * Parameter used for filtering serial port. See `SerialPortRequestOptions`\n   */\n  requestOption: SerialPortRequestOptions\n  /**\n   * Parameter used for reader class\n   */\n  readOption: readOption\n  /**\n   * Parameter used for parser class\n   */\n  signalOption: SignalOption\n}\n\nexport interface readOption {\n  /**\n   * If log should be printed to console\n   */\n  showLog: boolean,\n  /**\n   * Program output should be updated to the web every `updateMs` ms.\n   */\n  updateMs: number\n  /**\n   * Length of program output that should be kept.\n   * \n   * It is recommended to set this to 2 * maximum number of character in the textarea.\n   */\n  cutLength: number\n}\n\nexport interface SignalOption {\n  /**\n   * If log should be printed to console\n   */\n  showLog: boolean,\n  /**\n   * A string printed by microbit serial repl\n   * Indicating waiting for user input code\n   */\n  replLineReady: string,\n  /**\n   * A string to be printed by `print` statement\n   * Before execution of user code\n   * Outputting is implemented by adding print statement before user code\n   */\n  executionStart: string,\n  /**\n   * A string to be printed by `print` statement \n   * After execution of given user code\n   * Outputting is implemented by adding print statement after user code\n   */\n  executionDone: string,\n  /**\n   * A string printed by microbit serial repl\n   * Indicating an error occured\n   */\n  mainPYException: string,\n  execException: string,\n  /**\n   * Ms before microbit is rebooted to run `main.py`\n   * Allowing output buffer to be emptied before reboot\n   * \n   * Not used right now\n   */\n  waitMsBeforeReboot: number,\n}\n\nexport const defaultConfig: ManagerOption = {\n  connectOption: {\n    baudRate: 115200,\n    dataBits: 8,\n    stopBits: 1,\n    parity: 'none',\n    bufferSize: 4096,\n    flowControl: 'none'\n  },\n  requestOption: {\n    filters: [\n      { usbVendorId: 0x0d28 }\n    ]\n  },\n  readOption: {\n    showLog: true,\n    updateMs: 50,\n    cutLength: 1000\n  },\n  //maybe consider using regexp?\n  signalOption: {\n    showLog: true,\n    replLineReady: '>>> ',\n    executionDone: 'Execute Done: 0x3f3f3f3f',\n    executionStart: 'Execution Start: 0x3f3f3f3f',\n    mainPYException: 'Traceback (most recent call last):\\r\\n  File \"main.py\", line ',\n    execException:   'Traceback (most recent call last):\\r\\n  File \"<stdin>\", line 1, in <module>\\r\\n  File \"<string>\", line ',\n    waitMsBeforeReboot: 1\n  }\n};","import Stream from 'ts-stream';\nimport { MicrobitOutput, MicroPythonExceptionType } from '../../interface/message';\nimport { SignalOption } from '../../interface/config';\nimport { SerialReader } from './reader';\n\n/**\n * This class provides functions to read serial output of a specific procedure,\n * by using the reader helper class.\n * \n * Below is its mechaism. Based on following input of code\n * ```\n * 1|Get REPL Line|>>>\n * 2|Setup Code   |>>> file=open('main.py','w');s='print(executionStart)\\\\r\\\\nprint(1)\\\\r\\\\nprint(executionStart)';file.write(s);file.close();from microbit import *;sleep(0);reset();\n * 3|#Byte Written|8\n * 4|executionStart\n * 5|Code output  |1\n * 6|executionDone\n * 6|MicroPython v1.13 on 2021-02-19; micro:bit v2.0.0-beta.4 with nRF52833\n * 7|Type \"help()\" for more information.\n * 8|>>>\n * ```\n * \n * Error Sample (Flashing)\n * ```\n * Traceback (most recent call last):\n * File \"main.py\", line 1, in <module>\n * NameError: name 'prit' isn't defined\n * ```\n *\n * REPL Sample (Running)\n * ```\n * Traceback (most recent call last):\n * File \"<stdin>\", line 1, in <module>\n * File \"<string>\", line 1, in <module>\n * NameError: name 'prit' isn't defined\n * ```\n */\nexport class SerialParser {\n  portReader: SerialReader;\n  config: SignalOption;\n  startSignals: string[];\n  endSignals: string[];\n\n  constructor(portReader: SerialReader, config: SignalOption) {\n    this.portReader = portReader;\n    this.config = config;\n    this.startSignals = [\n      config.executionStart + '\\r\\n',\n      config.mainPYException,\n      config.execException\n    ];\n    this.endSignals = [\n      config.executionDone + '\\r\\n',\n      config.executionStart + '\\r\\n',\n      config.mainPYException,\n      config.execException\n    ];\n\n  }\n\n  /**\n   * Read until new repl line is ready\n   */\n  readUntilNewREPLLine(): Promise<void> {\n    return this.portReader.safeReadUntil(this.config.replLineReady);\n  }\n\n  /**\n   * Read until executionStart appears on serial\n   * - If there is no error, this Returns true \n   * - If (indentation/bracket) error occurs, the stream will be closed and false is returned\n   */\n  async readUntilExecStart(outputStream: Stream<MicrobitOutput>): Promise<boolean>{\n    if (this.config.showLog) console.log('Waiting for Execution Start');\n    const result = await this.portReader.safeReadUntilWithUpdate(\n      this.startSignals,\n      str => null\n    );\n    if (result !== 0) {\n      this.readErrors(outputStream);\n      return false;\n    }else return true;\n  }\n\n  /**\n   * Read output of user code, periodcally update output to stream\n   * \n   * Require executeStart printed earlier\n   */\n  async readUntilExecDone(outputStream: Stream<MicrobitOutput>): Promise<void> {\n    if(this.config.showLog) console.log('Execution Start');\n    //Now user code will run\n    //read until executionEnd signal appear on signal\n    let result = 1;\n    while (result===1){\n      result = await this.portReader.safeReadUntilWithUpdate(\n        this.endSignals,\n        str => outputStream.write({\n          kind: 'NormalOutput',\n          outputChunk: str\n        })\n      );\n      if(result === 1) outputStream.write({\n        kind: 'ResetPressed'\n      });\n    }\n    if (result !== 0) this.readErrors(outputStream);\n    else outputStream.end();\n    if (this.config.showLog) console.log('Execution done');\n  }\n\n  /**\n   * Read and parse micropython error output\n   */\n  async readErrors(outputStream: Stream<MicrobitOutput>):Promise<void>{\n    if (this.config.showLog) console.log('Execution Error');\n    //line1 indicates in which line of user code exception occured\n    //which is first line after mainPYException and execException\n    const line1 = await this.portReader.unsafeReadline();\n    const lineNumberString = line1.split(',', 2)[0];\n    //messageLine is in the form of 'ErrorType:ErrorMessage'\n    //exec is used in user code, the line following line1 may not be mssageLine\n    let lineCount = 0;\n    let messageLine = '';\n    while (lineCount === 0 || messageLine.startsWith('  ')) {\n      messageLine = await this.portReader.unsafeReadline();\n      lineCount += 1;\n    }\n    const line2split = messageLine.split(': ');\n    outputStream.write({\n      kind: 'ErrorMessage',\n      line: parseInt(lineNumberString) - 1,\n      type: line2split[0] as MicroPythonExceptionType,\n      message: (line2split.length === 1) ? '' : line2split[1]\n    });\n    outputStream.end();\n  }\n}","import { readOption } from '../../interface/config';\n/**\n * This class provide convenient function for reading serial output.\n */\nexport class SerialReader {\n  private serialBuffer = ''\n  private portReader: ReadableStreamDefaultReader<string>\n  private config: readOption\n\n  constructor(portReader: ReadableStreamDefaultReader<string>, config: readOption) {\n    this.portReader = portReader;\n    this.config = config;\n  }\n\n  /**\n   * Read from serial until termination is true.\n   * \n   * Buffer will not be cut in this function.\n   */\n  private async readLoop(termination: (text: string) => boolean): Promise<void> {\n    if(this.config.showLog) console.log(this.serialBuffer);\n    while (!termination(this.serialBuffer)) {\n      const { value } = await this.portReader.read();\n      this.serialBuffer += value;\n      if (this.config.showLog) console.log(this.serialBuffer);\n    }\n  }\n\n  /**\n   * Read from serial until termination is true.\n   * \n   * Assuming only last *bufferLimit* characters decides termination,\n   * this readLoop cuts unnecessary part of the buffer\n   */\n  private async readLoopWithCut(termination: (text: string) => boolean, bufferLimit: number): Promise<void> {\n    if (this.config.showLog) console.log(this.serialBuffer);\n    while (!termination(this.serialBuffer)) {\n      const len = this.serialBuffer.length;\n      if (len >= bufferLimit) this.serialBuffer = this.serialBuffer.substring(len - bufferLimit);\n      const { value } = await this.portReader.read();\n      this.serialBuffer += value;\n      if (this.config.showLog) console.log(this.serialBuffer);\n    }\n  }\n\n  /**\n   * Split *buffer* on first occurence of token.\n   * \n   * PRE: buffer = before + token + after\n   * buffer = after\n   * return before\n   */\n  private splitBufferOnFirst(token: string): string {\n    const index = this.serialBuffer.indexOf(token);\n    const before = this.serialBuffer.substr(0, index);\n    this.serialBuffer = this.serialBuffer.substr(index + token.length);\n    return before;\n  }\n\n  /**\n   * This function read a line from serial, \n   * and returns that line. \n   * \n   * You should only use this function when you are certain about what's comming from serial.\n   */\n  async unsafeReadline(): Promise<string> {\n    const token = '\\r\\n';\n    await this.readLoop(str => str.includes(token));\n    return this.splitBufferOnFirst(token);\n  }\n\n  /**\n   * This function reads until token appears in serial output, and returns nothing.\n   * \n   * Reading is optimized by cutting unnecessary string,\n   * so length of buffer < length of token.\n   * \n   * This is useful when reading potential long output,\n   * and the content before token does not matter\n   */\n  async safeReadUntil(token: string): Promise<void> {\n    await this.readLoopWithCut(str => str.includes(token), token.length);\n    this.splitBufferOnFirst(token);\n  }\n\n  /**\n   * This function reads until one of the token from the token array appears in serial output,\n   * and returns the token that appear in serial.\n   * Its content is also periodcally updates to upstream and when the token appears. \n   * \n   * This is useful when reading potential long output,\n   * and recent content of some length matters. \n   * \n   * Consider the following cases, which make the implementation necessary.\n   * \n   * `while True: print(1)` \n   * A lot of output\n   * \n   * `a=input(\"You name:\")` \n   * New content only come out after every thing gets outputted\n   * (So user can input)\n   */\n  async safeReadUntilWithUpdate(tokens: Array<string>, update: (text: string) => void): Promise<number> {\n    let bufferUpdated = false;\n    let matchedTokenID = -1;\n    const termination = (str: string) => {\n      bufferUpdated = true;\n      tokens.forEach((token,index) => { if (str.includes(token)) matchedTokenID = index; });\n      return matchedTokenID !== -1;\n    };\n    const updateTimer = setInterval(() => {\n      if (bufferUpdated) {\n        update(this.serialBuffer);\n        bufferUpdated = false;\n      }\n    }, this.config.updateMs);\n    await this.readLoopWithCut(termination, this.config.cutLength);\n    clearInterval(updateTimer);\n    update(this.splitBufferOnFirst(tokens[matchedTokenID]));\n    return matchedTokenID;\n  }\n}\n","import Stream from 'ts-stream';\nimport { SerialParser } from './helper/parser';\nimport { SerialReader } from './helper/reader';\nimport { MicrobitOutput, MicrobitState } from '../interface/message';\nimport { ManagerOption, SignalOption } from '../interface/config';\nconst ctrlC = '\\x03';\n\nexport class ConnectedMicrobitInteract {\n  port: SerialPort;\n  portWriter!: WritableStreamDefaultWriter<string>;\n  portReader!: ReadableStreamDefaultReader<string>;\n  portParser!: SerialParser\n  signal: SignalOption;\n  state: MicrobitState;\n\n  private portWriterStreamClosed: Promise<void> | null = null;\n  private portReaderStreamClosed: Promise<void> | null = null;\n\n  constructor(port: SerialPort, config: ManagerOption) {\n    this.port = port;\n    this.signal = config.signalOption;\n    this.state = MicrobitState.Free;\n    if (port.writable != null) {\n      const encoder = new TextEncoderStream();\n      this.portWriterStreamClosed = encoder.readable.pipeTo(port.writable)\n        .catch((_) => { console.log('disconnected in pipe'); });\n      this.portWriter = encoder.writable.getWriter();\n    }\n    if (port.readable != null) {\n      const decoder = new TextDecoderStream();\n      this.portReaderStreamClosed = port.readable.pipeTo(decoder.writable)\n        .catch((_) => { console.log('disconnected in pipe'); });\n      this.portReader = decoder.readable.getReader();\n\n      const portReaderHelper = new SerialReader(this.portReader, config.readOption);\n      this.portParser = new SerialParser(portReaderHelper, config.signalOption);\n    }\n  }\n\n  getState(): MicrobitState {\n    return this.state;\n  }\n\n  /**\n   * Convert a javascript string of python code to readable python code\n   */\n  private codeToPythonString(code: string): string {\n    /* \n    replaceAll From up to down\n      (1) user-used escape character. e.g. [\\][t]\n        This should still be [\\][t] in main.py\n        [\\][\\][t] in python string\n      (2) user-used [']\n        Because code is wrapped with ''\n        [\\]['] in python string\n      (3) new line created by user\n        Should be [\\r][\\n] in main.py\n        [\\][r][\\][n] in python string\n    */\n    return (\n      'print(\\'' + this.signal.executionStart + '\\')'\n      + '\\r\\n' + code + '\\r\\n'\n      + 'print(\\'' + this.signal.executionDone + '\\')'\n    ).replace(/\\\\/g, '\\\\\\\\')\n      .replace(/'/g, '\\\\\\'')\n      .replace(/\\r?\\n/g, '\\\\r\\\\n');\n  }\n\n  /**\n   * Send ctrlC to stop code execution\n   * - If no code was running, new REPL line starts\n   * - If code was running, then keyboardInterrupt appears\n   *    Serial input unavaible for a few ms, then new REPL line starts.\n   * Returns when the REPL line is clean and usable\n   */\n  private async getREPLLine(): Promise<void> {\n    await this.portWriter.write(ctrlC);\n    await this.portParser.readUntilNewREPLLine();\n  }\n\n  /**\n    * Flash ROM of the connected micro:bit.\n    *\n    * The flashing consists of two stages of flashing the code followed by a reboot.\n    * The promise completes when reboot is done, resulting in a stream of outputs from microbit.\n    */\n  async flash(code: string): Promise<Stream<MicrobitOutput>> {\n    /*Whole procedure with workaround note\n      - Get a clean REPL line, see getREPLLine()\n      - Send code to `main.py` to REPL\n          Observation: Microbit serial lose characters when multiple lines are inputted\n          Workaround: Put all code on one line\n          The logic might be:\n            Microbit does not have enough pin on the chip for serial hardware flow control.\n            So computer has no way of knowing microbit buffer is full.\n            And when the buffer is full, microbit serial start to lose character.\n\n            When all code is on one line, microbit does not do any hard work until \\r entered\n            Less likely for the buffer to be full and lose character\n      - Print(replDone)\n          On receiving replDone, manager knows microbit finished writing to main.py\n          It is rebooting and all later output are program output\n    */\n    if (this.state === MicrobitState.Busy) throw Error('Flash Failed: Device not free');\n    this.state = MicrobitState.Busy;\n\n    const codeInPythonString = this.codeToPythonString(code);\n    const outputStream = new Stream<MicrobitOutput>();\n\n    await this.getREPLLine();\n    await this.portWriter.write(\n      'file=open(\\'main.py\\',\\'w\\');'\n      + 's=\\'' + codeInPythonString + '\\';'\n      + 'file.write(s);'\n      + 'file.close();'\n      + 'from microbit import *;'\n      + 'reset()\\r'\n    );\n    if (await this.portParser.readUntilExecStart(outputStream)) {\n      this.portParser.readUntilExecDone(outputStream)\n        .then(() => { this.state = MicrobitState.Free; })\n        .catch(() => { outputStream.end(); });\n    } else this.state = MicrobitState.Free;\n    return outputStream;\n  }\n\n  /**\n    * Run code in REPL.\n    * Microbit is not rebooted. So all previous variables are kept.\n    */\n  async execute(code: string): Promise<Stream<MicrobitOutput>> {\n    if (this.state === MicrobitState.Busy) throw Error('Execute Failed: Device not free');\n    this.state = MicrobitState.Busy;\n\n    const codeInPythonString = this.codeToPythonString(code);\n    const outputStream = new Stream<MicrobitOutput>();\n\n    await this.getREPLLine();\n    await this.portWriter.write(\n      's=\\'' + codeInPythonString + '\\';'\n      + 'exec(s)\\r'\n    );\n    if (await this.portParser.readUntilExecStart(outputStream)) {\n      this.portParser.readUntilExecDone(outputStream)\n        .then(() => { this.state = MicrobitState.Free; })\n        .catch(() => { outputStream.end(); });\n    } else this.state = MicrobitState.Free;\n    return outputStream;\n  }\n\n  /**\n    * Reboots the connected micro:bit.\n    * The promise completes with a stream of outputs from microbit.\n    */\n  async reboot(): Promise<Stream<MicrobitOutput>> {\n    if (this.state === MicrobitState.Busy) throw Error('Reboot Failed: Device not free');\n    this.state = MicrobitState.Busy;\n\n    await this.getREPLLine();\n    await this.portWriter.write(\n      'from microbit import *;'\n      + 'reset()\\r'\n    );\n    const outputStream = new Stream<MicrobitOutput>();\n    if (await this.portParser.readUntilExecStart(outputStream)) {\n      this.portParser.readUntilExecDone(outputStream)\n        .then(() => { this.state = MicrobitState.Free; })\n        .catch(() => { outputStream.end(); });\n    } else this.state = MicrobitState.Free;\n    return outputStream;\n  }\n\n  private waitUntil(cond: () => boolean): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const timer = setInterval(() => {\n        if (cond()) {\n          clearInterval(timer);\n          resolve();\n        }\n      }, 200);\n    });\n  }\n\n  /**\n    * Send an interrupt signal the connected micro:bit.\n    * This will try to stop any python code running on the micro:bit.\n    *\n    * The promise completes when the interruption is successful.\n    * If code is being executed, then there should be a ErrorMessage in the outputStream.\n    */\n  async interrupt(): Promise<void> {\n    if (this.state === MicrobitState.Free) throw Error('Interupt Failed: Device not running code');\n    await this.portWriter.write(ctrlC);\n    await this.waitUntil(() => this.state === MicrobitState.Free);\n    //Not reading for new REPL line here\n    //because portParser might already be reading.\n  }\n\n  /**\n    * Disconnect the paired micro:bit.\n    */\n  async disconnect(): Promise<void> {\n    console.log('Disconnection initiated:');\n\n    await this.portReader.cancel('App will unmount');\n    await this.portReaderStreamClosed;\n    console.log('Reader closed;');\n\n    await this.portWriter.abort('App will unmount');\n    await this.portWriterStreamClosed;\n    console.log('Writer closed.');\n\n    await this.port.close();\n  }\n}","import { serial } from 'web-serial-polyfill';\nimport { defaultConfig, ManagerOption } from '../interface/config';\nimport { ConnectedMicrobitInteract } from './interact';\nimport { FailedConnection, MicrobitConnection } from '../interface/message';\n\n/**\n * Check if browser support WebSerial\n * Return true if WebSerial is supported\n * \n * If WebSerial is not supported but WebUSB is supported,\n * this function applys polyfill from Google.\n */\nexport function checkCompatability(): boolean {\n  if ('serial' in navigator) return true;\n  else {\n    if ('usb' in navigator) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (navigator as any).serial = serial;\n      return true;\n    } else return false;\n  }\n}\n\n/**\n * Given a unopenned serial port and configuration object,\n * Create a MicrobitConnection object\n */\nasync function createConnection(port: SerialPort, config: ManagerOption): Promise<MicrobitConnection | FailedConnection> {\n  try {\n    await port.open(config.connectOption);\n  } catch (error) {\n    return {\n      kind: 'ConnectionFailure',\n      type: 'Failed to Open Port',\n      reason: error.message\n    };\n  }\n  const portInteract = new ConnectedMicrobitInteract(port, config);\n  return {\n    kind: 'MicrobitConnection',\n    interact: portInteract,\n    disconnection: new Promise((resolve, _) => {\n      const onDisconnect = (_: Event) => {\n        console.log('disconnected');\n        port.removeEventListener('disconnect', onDisconnect);\n        resolve();\n      };\n      port.addEventListener('disconnect', onDisconnect);\n    })\n  };\n}\n\n/**\n * Create a MicrobitConnection object\n * By selecting a serial port in the native permission window.\n * \n * **This must be followed by a UserGesture within a time period**\n * \n * *In some rare cases, calling other function before this can result in a UserGesture Error*\n */\nexport async function connectBySelection(config: ManagerOption = defaultConfig): Promise<MicrobitConnection | FailedConnection> {\n  let port: SerialPort;\n  try {\n    port = await navigator.serial.requestPort(config.requestOption);\n  } catch (error) {\n    return {\n      kind: 'ConnectionFailure',\n      type: 'Failed to Obtain Port',\n      reason: error.message\n    };\n  }\n  return createConnection(port, config);\n}\n\n/**\n * Create a MicrobitConnection object\n * By connecting to a paried serial device\n * This does not require selecting device in the native window.\n */\nexport async function connectByPariedDevice(config: ManagerOption = defaultConfig): Promise<MicrobitConnection | FailedConnection> {\n  const ports = await navigator.serial.getPorts();\n  if (ports.length === 1) return createConnection(ports[0], config);\n  else if(ports.length === 0) return {\n    kind: 'ConnectionFailure',\n    type: 'Failed to Obtain Port',\n    reason: 'No Paired Serial Devices Available'\n  }; else return {\n    kind: 'ConnectionFailure',\n    type: 'Failed to Obtain Port',\n    reason: 'Multiple Paired Serial Devices Available'\n  };\n}\n\n/**\n * Create a MicrobitConnection object\n * By user plugging the device\n */\nexport async function connectByPlugIn(config: ManagerOption = defaultConfig): Promise<MicrobitConnection | FailedConnection> {\n  //Given serialPortInfo, check if it agrees with filters\n  function checkUSBInfo(info: SerialPortInfo, filters: SerialPortFilter[] | undefined): boolean {\n    if (filters === undefined) return true; //no constraint\n    else {\n      for (const f of filters) {\n        //for two property, no constraint or equal\n        if (f.usbProductId === undefined || f.usbProductId === info.usbProductId)\n          if (f.usbVendorId === undefined || f.usbVendorId === info.usbVendorId)\n            return true;\n      }\n      return false;\n    }\n  }\n  \n  return new Promise((resolve, _) => {\n    /**\n     * A event listener function\n     * Resolves the promise when a device is plugged in\n     */\n    const waitForPort = async(event: Event) => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const port: SerialPort = (event as any).port || event.target;\n      if (checkUSBInfo(port.getInfo(), config.requestOption.filters)) {\n        navigator.serial.removeEventListener('connect', waitForPort);\n        resolve(createConnection(port, config));\n      }\n    };\n    //add the listener\n    navigator.serial.addEventListener('connect', waitForPort);\n  });\n}","export default __webpack_public_path__ + \"static/media/Duck.d495e477.jpg\";","/* eslint @typescript-eslint/no-var-requires: \"off\" */\n\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { createMuiTheme, makeStyles } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Fuse from 'fuse.js';\nimport PropTypes from 'prop-types';\nimport { default as React, useState } from 'react';\nimport * as Space from 'react-spaces';\nimport duck from './resources/Duck.jpg';\nimport './styles.css';\n\ntype DuckProps = {\n  closeDuck(): void,\n  lineNumber?: number,\n  lineText?: string\n}\n\ntype SlideButton = {\n  link: string,\n  text: string,\n  params: string[]\n}\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ffcc00', // feel free to change this colour\n    }\n  },\n});\n\n\nconst useStyles = makeStyles( (theme) => ({\n  button: {\n    flexGrow: 1,\n    border: 1,\n    borderRadius: 3,\n    color: 'black',\n    height: 48,\n    padding: theme.spacing(2),\n    margin: 8,\n    textAlign: 'center',\n    textTransform: 'none'\n  },\n  xButton: {\n    color: 'white',\n    backgroundColor: '#ff0000',\n    height: 20,\n    padding: theme.spacing(2),\n    textAlign: 'center'\n  },\n  speech: {\n    flexGrow: 1,\n    border: 1,\n    borderRadius: 3,\n    color: 'black',\n    padding: theme.spacing(2),\n    margin: 8,\n    textAlign: 'left'\n  }\n}));\n\nlet prevSlideParams: string[] = [];\nconst jsonData = require('./resources/duck_flowchart.json');\nconst slideNames = Object.keys(jsonData);\n\nconst tutorials = {\n  'HelloWorld': \n`from microbit import *\ndisplay.scroll(\"Hello, World!\")`,\n  \n  'SimpleButtons': \n`from microbit import *\nimport music\n\nwhile True:\n    if button_a.is_pressed():\n        display.show(Image.MUSIC_QUAVER)\n        music.play(music.NYAN)\n    if button_b.is_pressed():\n        display.show(Image.MEH)\n        music.play(music.POWER_DOWN)\n\n    display.show(Image.COW)`\n};\n\nfunction executeCorrespondingCommand(commandString: string, props: DuckProps) {\n  if (commandString === 'link_to_tutorial_about_errors') {\n    return (\n      <a href=\"https://example.com/faq.html\" target=\"_blank\" rel=\"noreferrer\">\n        Tutorial about errors\n      </a>\n    );\n  }\n  else if (commandString === 'get_readable_diff') {\n    return readableDiffMessage(props);\n\n  }\n  else if (commandString === 'get_error_line_no_and_highlight') {\n    return readableErrorLineNumber(props);\n  }\n  else {\n    return commandString;\n  }\n} \n\nfunction readableErrorLineNumber(props: DuckProps) {\n  if (props.lineNumber) {\n    return (<div>\n      Your error message tells you that the error is on line \n      {props.lineNumber}, \n      so I’ve highlighted that line for you in the editor. \n      What type of error is displayed?\n    </div>);\n  }\n  else {\n    return ('I cannot see your error message. Perhaps press \\'RUN CODE\\' again, and double check that an error message is visible?');\n  }\n\n}\n\nfunction readableDiffMessage(props: DuckProps) {\n  if (props.lineNumber && props.lineText) {\n    const strippedCodeLine = props.lineText.trim();\n    const tutorial = tutorials[prevSlideParams[0] as keyof typeof tutorials];\n    const strippedTutorialLines = tutorial.split('\\n').map(x => x.trim());\n    const fuse = new Fuse(strippedTutorialLines, {includeMatches: true, isCaseSensitive: true});\n    const result = fuse.search(strippedCodeLine);\n    if (result.length > 0) {\n      const closestLine = result[0];\n      //const backwardsFuse = new Fuse([strippedCodeLine], { includeMatches: true, isCaseSensitive: true });\n      return (<div> \n        The closest matching line in the tutorial is line \n        {closestLine.refIndex} which reads: \n        <Typography color='secondary' variant=\"h6\">{closestLine.item}</Typography>\n        whereas your line reads: \n        <Typography color='secondary' variant=\"h6\">{strippedCodeLine}</Typography>\n      </div>);\n    }\n    else {\n      return ('Unfortunately, your line does not look like any of the lines in the tutorial.');\n    }\n  }\n  else return ('I cannot see your error message. Perhaps press \\'RUN CODE\\' again, and double check that an error message is visible?');\n}\n\n/** Not currently used - however, it highlights the difference between the tutorial line and the user's erroneous code line. */\n\n/*\nfunction highlightDiffLine(givenLine: Fuse.FuseResult<string>) {\n  if (givenLine.matches) {\n    console.log(givenLine.matches);\n    const lineText = givenLine.item;\n    const matchIndices = givenLine.matches[0].indices;\n    let prevMatchEnd = -1;\n    const highlightedDiffs: JSX.Element[] = [];\n\n    for (let currentMatch = 0; currentMatch < matchIndices.length; currentMatch++) {\n      const nextMatchStart = matchIndices[currentMatch][0];\n      const nextUnmatchingPortion = \n        <Typography color='secondary' display=\"inline\">\n          {lineText.substring(prevMatchEnd + 1, nextMatchStart)}\n        </Typography>;\n      prevMatchEnd = matchIndices[currentMatch][1];\n      const nextMatchingPortion = \n        <Typography display=\"inline\">\n          {lineText.substring(nextMatchStart, prevMatchEnd + 1)}\n        </Typography>;\n      highlightedDiffs.push(<span>{nextUnmatchingPortion}{nextMatchingPortion}</span>);\n    }\n    \n    return highlightedDiffs;\n  }\n  else{\n    return givenLine.item;\n  } \n}*/\n\nfunction parseTextCommand(commandString: string, props: DuckProps) {\n  let parsedCommand: string|JSX.Element = commandString;\n  if (commandString.startsWith('{')) { \n    // must also then end with '}'\n    const rawCommand = commandString.slice(1, -1); // remove surrounding braces\n    parsedCommand = executeCorrespondingCommand(rawCommand, props);\n  }\n  return parsedCommand;\n}\n\nfunction parseSpeech(speech: string, props: DuckProps) {\n  const re = /(\\{[\\S\\s]+?\\})/g;\n  const splitSpeech = speech.split(re).filter(Boolean);\n  const parsedSpeech = splitSpeech.map(x => parseTextCommand(x, props));\n  return parsedSpeech;\n}\n\nfunction MakeButtons(initialSlide: string, props: DuckProps) {\n  const classes = useStyles();\n  const [slide, setSlide] = useState(initialSlide);  \n  // Here useState is a 'Hook' (from React) which means the slide variable is updated when the setSlide function is run\n\n  return (\n    <Space.Fixed height={650} width={600}>\n      <div>\n        <img src={duck} height={650} width={600} alt=\"cartoon duck\" />\n      </div>\n\n      <Space.Left size={60}></Space.Left>\n\n      <Space.Fill>\n        <Space.Top size={20}></Space.Top>\n        <Space.Fill>\n          <Space.Fill>\n            <Typography className={classes.speech}>\n              {parseSpeech(jsonData[slide].speech, props)}\n            </Typography>\n            <Grid container justify=\"center\" alignItems=\"flex-start\" spacing={2}>\n              {jsonData[slide].buttons.map(function (button: SlideButton) {\n                return (\n                  <div key={button.text}>\n                    <Grid item xs>\n                      <ThemeProvider theme={theme}>\n                        <Button\n                          className={classes.button}\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            if (button.link) {\n                              // this checks button.link isnt null\n                              prevSlideParams = button.params;\n                              setSlide(button.link);\n                            } else {\n                              props.closeDuck();\n                            }\n                          }}\n                        >\n                          {button.text}\n                        </Button>\n                      </ThemeProvider>\n                    </Grid>\n                  </div>\n                );\n              })}\n            </Grid>\n          </Space.Fill>\n        </Space.Fill>\n        <Space.Bottom size={200}></Space.Bottom>\n      </Space.Fill>\n      <Space.Right size={250}>\n        <Space.Right size={65}>\n          <Button\n            className={classes.xButton}\n            variant=\"contained\"\n            onClick={() => {\n              props.closeDuck();\n            }\n            }\n          >\n            {'X'}\n          </Button>\n        </Space.Right>\n      </Space.Right>\n    </Space.Fixed>\n  );\n}\nMakeButtons.propTypes = {\n  closeDuck: PropTypes.func\n};\n\nexport default function StartSlides(props: DuckProps): JSX.Element {\n  return MakeButtons(slideNames[0], props);\n}","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport './TutorialViewer.css';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { Button } from '@material-ui/core';\nimport { DoubleArrow, PlayArrow, Visibility, VisibilityOff } from '@material-ui/icons';\nimport { MicrobitOutput } from '../api/microbit/interface/message';\nimport { Stream } from 'ts-stream';\n\n\n/**\n * Readonly Python code cell, with buttons to:\n * - toggle between viewing the full {@link PythonCodeProps.code} and only the\n *   highlighted fragment, as specified by `# LINES {start}-{end}` (counting\n *   from 1 like humans do, both ends inclusive) on the first line of the code;\n * - execute the full {@link PythonCodeProps.code} using\n *   {@link PythonCodeProps.onRun} and display the output and error message, if\n *   {@link PythonCodeProps.hasFreeConnection} is true;\n * - insert the highlighted fragment into the editor using\n *   {@link PythonCodeProps.onInsertIntoEditor}.\n *\n * If this meta-comment is missing or not in the correct format, the toggle\n * views button will be hidden, and the highlighted fragment is the whole\n * code for the purpose of {@link PythonCodeProps.onInsertIntoEditor}.\n */\nclass PythonCode extends React.Component<PythonCodeProps, PythonCodeState> {\n  /**\n   * Whether the first line of {@link PythonCodeProps.code} is a comment\n   * specifying the extent of the highlighted fragment.\n   * If false, the toggle button is hidden away.\n   */\n  readonly isExpandable: boolean;\n\n  /**\n   * Starting index of the highlighted fragment in {@link lines},\n   * counting from 0, included.\n   * Defaults to 0.\n   */\n  readonly highlightStart: number;\n\n  /**\n   * Ending index of the highlighted fragment in {@link lines},\n   * counting from 0, excluded.\n   * Defaults to {@link lines}.length.\n   */\n  readonly highlightEnd: number;\n\n  /**\n   * The code split by new lines, stored here to avoid repeated computation.\n   */\n  readonly lines: string[];\n\n  /**\n   * The highlighted lines, AKA highlighted fragment, i.e.,\n   * {@link lines}[{@link highlightStart}, {@link highlightEnd}).\n   */\n  readonly highlightedLines: string[];\n\n  /**\n   * Parses the meta-comment specifying the highlighted fragment (if there is\n   * one), compute and set the readonly properties.\n   *\n   * The starting line number `x` and the ending line number `y` must satisfy:\n   * -   1 ≤ x, y ≤ {@link lines}.length\n   *   ==> 0 ≤ x < {@link lines}.length && 0 < y ≤ {@link lines}.length\n   * -   x ≤ y\n   *\n   * An alert is thrown if `# LINES` is matched at the start of the first line\n   * but `x` and `y` cannot be parsed or don't satisfy the conditions above\n   * (but not with e.g. `# LINES 1-2-3`).\n   * In this case, like when `# LINES` is not matched at the start of line 0,\n   * - {@link isExpandable} is set to false;\n   * - {@link highlightStart} is set to 0;\n   * - {@link highlightEnd} is set to {@link lines}.length.\n   */\n  // TODO unit test / use a proper parser\n  constructor(props: PythonCodeProps) {\n    super(props);\n\n    this.isExpandable = false;\n    this.lines = this.props.code.split('\\n');\n    this.highlightStart = 0;\n    this.highlightEnd = this.lines.length;\n\n    if (this.lines.length > 0) {\n      // Parse \"LINES x-y\".\n      const fragments = this.lines[0].split('# LINES ');\n      if (fragments.length === 2) { // '# LINES x-y' -> ['', 'x-y']\n        const lineNumbers = fragments[1].split('-');\n        const start = parseInt(lineNumbers[0]);\n        const end = parseInt(lineNumbers[1]);\n\n        function isLineNumberValid(lineNumber: number, name: string, maxValue: number): boolean {\n          if (isNaN(lineNumber)) {\n            alert(`Failed to parse ${name}: ${lineNumber}`);\n            return false;\n          }\n          if (lineNumber < 1) {\n            alert(`${name} must be at least 1: ${lineNumber}`);\n            return false;\n          }\n          if (lineNumber > maxValue) {\n            alert(`${name} must not exceed the biggest line number ${maxValue}`);\n            return false;\n          }\n\n          return true;\n        }\n\n        if (isLineNumberValid(start, 'Starting line', this.lines.length)\n          && isLineNumberValid(end, 'Ending line', this.lines.length)) {\n          if (start >= end) {\n            this.highlightStart = start - 1; // indexing from 0\n            this.highlightEnd = end - 1 + 1; // end included\n            this.isExpandable = true;\n          } else {\n            alert(`The starting line number must be at least the ending line number, but got ${start} < ${end}`);\n          }\n        }\n      }\n    }\n\n    this.highlightedLines = this.lines.slice(this.highlightStart, this.highlightEnd);\n\n    this.state = {\n      isExpanded: !this.isExpandable,\n      output: '',\n    };\n  }\n\n  /**\n   * Toggle between viewing the full example code and the highlighted fragment,\n   * by toggling {@link PythonCodeState.isExpanded}.\n   */\n  onToggleExpand(): void {\n    this.setState({isExpanded: !this.state.isExpanded});\n  }\n\n  /**\n   * Run the whole {@link PythonCodeProps.code}, and store the normal output\n   * and error messages other than `KeyboardInterrupt` in\n   * {@link PythonCodeState.output} to be displayed.\n   */\n  async onRun(): Promise<void> {\n    const outputStream = await this.props.onRun(this.props.code);\n    await outputStream.forEach((output) => {\n      switch (output.kind) {\n        case 'NormalOutput':\n          this.setState({\n            output: output.outputChunk,\n          });\n          break;\n        case 'ErrorMessage':\n          if (output.type === 'KeyboardInterrupt') break;\n          const oldOutput = this.state.output;\n          this.setState({\n            output: `${oldOutput}\nError on line ${output.line}:\n${output.type}: ${output.message}`,\n          });\n      }\n    });\n  }\n\n  /**\n   * Insert the highlighted fragment {@link lines}[{@link highlightStart},\n   * {@link highlightEnd}) into the editor through\n   * {@link PythonCodeProps.onInsertIntoEditor}.\n   */\n  onInsertIntoEditor(): void {\n    this.props.onInsertIntoEditor(this.highlightedLines.join('\\n'));\n  }\n\n  /**\n   * Compute the displayed text.\n   *\n   * - If {@link PythonCodeState.isExpanded} is true, this is the entirety of\n   *   the {@link lines} (joined with new lines);\n   * - otherwise, this is the {@link highlightedLines} with `# ...` shown at\n   *   either end if there are lines of code folded there.\n   */\n  getDisplayedText(): string {\n    let lines;\n\n    if (this.state.isExpanded) {\n      lines = this.lines;\n    } else {\n      lines = this.highlightedLines;\n\n      if (this.highlightStart > 0) {\n        lines = ['# ...', ...lines];\n      }\n      if (this.highlightEnd < this.lines.length) {\n        lines = [...lines, '# ...'];\n      }\n    }\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * A quirky feature: line numbers are only shown when the full code is shown.\n   * (And when the the meta-comment is missing and the fragment is the whole\n   *  code, {@link PythonCodeState.isExpanded} is set to true, thus showing the\n   *  line numbers by default without offering the ability to toggle the view.)\n   *\n   * Incidentally, showing the line numbers makes it harder to copy the code:\n   * the line numbers are also copied. This could be a feature in that it\n   * prevents the students from copying code other than the lines that we wish\n   * to highlight and for them to insert into the editor.\n   */\n  render(): JSX.Element {\n    return <div>\n      <SyntaxHighlighter\n        style={darcula}\n        language=\"py\"\n        showLineNumbers={this.state.isExpanded}\n      >\n        {this.getDisplayedText()}\n      </SyntaxHighlighter>\n\n      {\n        this.isExpandable &&\n        <Button\n          className=\"Tutorial-code-buttons\"\n          variant=\"contained\"\n          endIcon={this.state.isExpanded ? <Visibility/> : <VisibilityOff/>}\n          onClick={this.onToggleExpand.bind(this)}\n        >\n          Full example code:\n        </Button>\n      }\n\n      <Button\n        className=\"Tutorial-code-buttons\"\n        variant=\"contained\"\n        color=\"primary\"\n        startIcon={<PlayArrow/>}\n        disabled={!this.props.hasFreeConnection()}\n        onClick={this.onRun.bind(this)}\n      >\n        Run full example\n      </Button>\n\n      <Button\n        className=\"Tutorial-code-buttons\"\n        variant=\"contained\"\n        color=\"secondary\"\n        endIcon={<DoubleArrow/>}\n        onClick={this.onInsertIntoEditor.bind(this)}\n      >\n        Insert fragment into editor\n      </Button>\n\n      {this.state.output.length > 0 &&\n      <div className=\"Tutorial-output\">\n        {this.state.output}\n      </div>\n      }\n    </div>;\n  }\n}\n\ninterface PythonCodeProps {\n  code: string,\n\n  onRun(code: string): Promise<Stream<MicrobitOutput>>,\n\n  hasFreeConnection(): boolean,\n\n  onInsertIntoEditor(codeSnippet: string): void,\n}\n\n\ninterface PythonCodeState {\n  isExpanded: boolean,\n  output: string,\n}\n\n\n/**\n * Renders the tutorial from the supplied {@link TutorialViewerProps.markdown}.\n *\n * The code blocks in markdown are rendered with syntax highlighting.\n * In particular, code blocks whose language is 'py', such as\n *\n * ~~~py\n * print('Hello, world')\n * ~~~\n *\n * or\n *\n * ```py\n * print('Hello world!')\n * ```\n *\n * are rendered with\n * - a run button which, when enabled if\n *   {@link TutorialViewerProps.hasFreeConnection} returns true, runs the code\n *   in this code block with {@link TutorialViewerProps.onRun};\n * - an insert into editor button, which inserts (a subset of, see below) the\n *   code in this code block into the editor with\n *   {@link TutorialViewerProps.onInsertIntoEditor}.\n *\n * Furthermore, if the first line of code is a comment of the format\n * `# LINES x-y` where `x`, `y` are integers satisfying 0 ≤ `x` ≤ `y` ≤ #lines,\n * such as\n *\n * ~~~py\n * # LINES 1-2\n * print(1)\n * print(2)\n * print(3)\n * ~~~\n *\n * then by default only the code fragment is shown, and now a button to toggle\n * between showing the full code and only the highlighted fragment is\n * available.\n * Also, only the highlighted fragmented is inserted now; see\n * {@link PythonCode} for the details.\n *\n */\nexport default class TutorialViewer extends React.Component<TutorialViewerProps, unknown> {\n  renderCode(code: MarkdownCode): JSX.Element {\n    if (code.language === 'py') {\n      return <PythonCode\n        code={code.value}\n        onRun={this.props.onRun}\n        onInsertIntoEditor={this.props.onInsertIntoEditor}\n        hasFreeConnection={this.props.hasFreeConnection}\n      />;\n    } else {\n      return <SyntaxHighlighter\n        style={darcula}\n        language={code.language}\n      >\n        {code.value}\n      </SyntaxHighlighter>;\n    }\n  }\n\n  renderers = {code: this.renderCode.bind(this)};\n\n  render(): JSX.Element {\n    return <ReactMarkdown className=\"Tutorial-markdown\" renderers={this.renderers}>\n      {this.props.markdown}\n    </ReactMarkdown>;\n  }\n}\n\ninterface TutorialViewerProps {\n  markdown: string,\n\n  onRun(code: string): Promise<Stream<MicrobitOutput>>,\n\n  hasFreeConnection(): boolean,\n\n  onInsertIntoEditor(codeSnippet: string): void,\n}\n\ninterface MarkdownCode {\n  /** The language of the code block, specified by e.g. ```py ...``` */\n  language: string,\n  /** The contents of the code block */\n  value: string,\n}\n\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { Box, Button } from '@material-ui/core';\nimport Editor, { loader, Monaco } from '@monaco-editor/react';\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport React from 'react';\nimport { Stream } from 'ts-stream';\nimport {\n  checkCompatability,\n  connectByPariedDevice,\n  connectByPlugIn,\n  connectBySelection\n} from '../api/microbit/impl/connect';\nimport { FailedConnection, MicrobitConnection, MicrobitOutput, MicrobitState } from '../api/microbit/interface/message';\nimport DuckViewer from '../duck-code';\nimport './APIDemo.css';\nimport TutorialViewer from './TutorialViewer';\n\ninterface APIDemoState {\n  /** The markdown of the tutorial being displayed. */\n  tutorial: string,\n  output: string,\n  connection: MicrobitConnection | null,\n  editor: monaco.editor.IStandaloneCodeEditor | null,\n  monaco: Monaco | null,\n  needDuck: boolean,\n  /** The most recent error message for the user, if one exists (otherwise, empty string) */\n  errorString: string,\n  errorLine: number,\n  errorMonacoIDs: string[] | null\n}\n\nconst exampleCode = `from microbit import *\nimport music\n\nwhile True:\n    if accelerometer.was_gesture('shake'):\n        display.show(Image.CONFUSED)\n        sleep(1500)\n    if accelerometer.was_gesture('face up'):\n        display.show(Image.HAPPY)\n    if accelerometer.was_gesture('left'):\n        display.show('<')\n        music.play(music.JUMP_UP)\n    if accelerometer.was_gesture('right'):\n        display.show('>')\n        music.play(music.JUMP_DOWN)\n`;\n\nclass APIDemo extends React.Component<unknown, APIDemoState> {\n  constructor(props: unknown) {\n    super(props);\n    this.state = {\n      tutorial: '# Fetching tutorial...',\n      output: '',\n      connection: null,\n      editor: null,\n      monaco: null,\n      needDuck: false,\n      errorString: '',\n      errorLine: 0,\n      errorMonacoIDs: null\n    };\n    if (!checkCompatability()) alert('Browser not supported');\n\n    loader.init().then(t => {\n      console.log(t);\n    });\n    this.removeErrorLineOfCode = this.removeErrorLineOfCode.bind(this);\n  }\n\n  /**\n   * Fetch a markdown file from `public/tutorials/` once mounted.\n   */\n  componentDidMount(): void {\n    fetch('tutorials/ErrorTute.md')\n      .then((r) => r.text())\n      .then((text) =>\n        this.setState({\n          tutorial: text,\n        }),\n      );\n  }\n\n  /**\n   * Called once the Monaco editor is mounted to set\n   * {@link APIDemoState.editor} and {@link APIDemoState.monaco}.\n   */\n  handleEditorDidMount(editor: monaco.editor.IStandaloneCodeEditor, monaco: Monaco): void {\n    this.setState({\n      editor: editor,\n      monaco: monaco\n    });\n  }\n\n  /**\n   * @summary Disconnect the micro:bit before unmounting.\n   *\n   * For dev purposes only: upon recompilation, this component loses access to\n   * the {@link APIDemoState.connection} object; if the web serial connection\n   * is not terminated here, the page must needs to be refreshed to reclaim the\n   * micro:bit interface.\n   *\n   * In production, {@link APIDemo} is intended to be the top-level component\n   * to be dismounted only when the page is closed, after which the web serial\n   * connection is terminated anyways, making it unnecessary to manually invoke\n   * the disconnection procedure.\n   */\n  componentWillUnmount(): void {\n    this.state.connection?.interact.disconnect();\n  }\n\n  /**\n   * @summary Renders a button in the header of the app.\n   *\n   * The 'Start' button is enabled only when {@link APIDemoState.connection} is null,\n   * as it is intended to be used when:\n   * - the user first opens the page, and connects the micro:bit\n   * - the micro:bit is disconnected, and the user wants to reconnect it (or to\n   *   connect another one)\n   *\n   * {@link MicrobitState.Busy} and {@link MicrobitState.Free} document when\n   * the other micro:bit related buttons are enabled.\n   *\n   * The duck 'Help' button is always enabled.\n   */\n  renderHeaderButton(text: string, callback: () => void, isEnabled: boolean): JSX.Element {\n    return (\n      <Box paddingLeft={2}>\n        <Button\n          className=\"APIDemo-button\"\n          variant=\"contained\"\n          disabled={!isEnabled}\n          onClick={() => callback()}\n        >\n          {text}\n        </Button>\n      </Box>\n    );\n  }\n\n  /**\n   * Return true if the state of {@link APIDemoState.connection} is\n   * {@link MicrobitState.Free}, and false otherwise.\n   */\n  hasFreeConnection(): boolean {\n    return this.state.connection?.interact.getState() === MicrobitState.Free;\n  }\n\n  /**\n   * Return true if the state of {@link APIDemoState.connection} is\n   * {@link MicrobitState.Busy}, and false otherwise.\n   */\n  hasBusyConnection(): boolean {\n    return this.state.connection?.interact.getState() === MicrobitState.Busy;\n  }\n\n  renderDuck(): JSX.Element {\n    let renderedDuck;\n    if (this.state.errorString !== '') {\n      renderedDuck = <DuckViewer\n        closeDuck={this.exileDuck.bind(this)}\n        lineNumber={this.state.errorLine}\n        lineText={this.state.editor!.getValue().split('\\n')[this.state.errorLine - 1]}\n      />;\n    } else {\n      renderedDuck = <DuckViewer closeDuck={this.exileDuck.bind(this)}/>;\n    }\n    return renderedDuck;\n  }\n\n  /**\n   * Render {@link APIDemoState.tutorial} with {@link TutorialViewer} unless\n   * {@link APIDemoState.needDuck} is true, in which case\n   * {@link APIDemoState.errorString} and the duck (via {@link renderDuck}) are\n   * rendered instead.\n   */\n  renderTutorial(): JSX.Element {\n    return <div className=\"APIDemo-tutorial\">\n      {this.state.needDuck\n        ? <div>\n          <h1>\n            {this.state.errorString}\n          </h1>\n          {this.renderDuck()}\n        </div>\n        : <TutorialViewer\n          markdown={this.state.tutorial}\n          onRun={this.onRunCell.bind(this)}\n          hasFreeConnection={this.hasFreeConnection.bind(this)}\n          onInsertIntoEditor={this.onInsertIntoEditor.bind(this)}\n        />\n      }\n    </div>;\n  }\n\n  /**\n   * Render the python code editor.\n   *\n   * The default code is {@link exampleCode}.\n   * The current code can be accessed via {@link APIDemoState.editor}.\n   */\n  renderEditor(): JSX.Element {\n    return (\n      <Editor\n        defaultLanguage=\"python\"\n        defaultValue={exampleCode}\n        onMount={this.handleEditorDidMount.bind(this)}\n        theme='light'\n        options={{\n          minimap: {\n            enabled: false,\n          },\n          fontSize: 18,\n        }}\n        wrapperClassName=\"APIDemo-code\"\n      />\n    );\n  }\n\n  /**\n   * Render a text box displaying {@link APIDemoState.output}.\n   */\n  renderOutput(): JSX.Element {\n    return (\n      <textarea\n        className=\"APIDemo-output\"\n        value={this.state.output}\n        readOnly\n      />\n    );\n  }\n\n  render(): JSX.Element {\n    return (\n      <div className=\"APIDemo\">\n        <header className=\"APIDemo-header\">\n          {this.renderHeaderButton('Start', this.onStart.bind(this), this.state.connection == null)}\n          {this.renderHeaderButton('Flash', () => this.onFlash(this.state.editor!.getValue()), this.hasFreeConnection())}\n          {this.renderHeaderButton('Run', () => this.onRun(this.state.editor!.getValue()), this.hasFreeConnection())}\n          {this.renderHeaderButton('Interrupt', this.onInterrupt.bind(this), this.hasBusyConnection())}\n          {this.renderHeaderButton('Reboot', this.onReboot.bind(this), this.hasFreeConnection())}\n          {this.renderHeaderButton('Help', this.summonDuck.bind(this), true)}\n        </header>\n        <div className=\"APIDemo-body\">\n          {this.renderTutorial()}\n          {this.renderEditor()}\n          {this.renderOutput()}\n        </div>\n      </div>\n    );\n  }\n\n  async connect(connection: Promise<MicrobitConnection | FailedConnection>): Promise<boolean> {\n    const c = await connection;\n    switch (c.kind) {\n      case 'ConnectionFailure':\n        alert(c.reason);\n        return false;\n      case 'MicrobitConnection':\n        this.setState({connection: c});\n        c.disconnection.then(async () => {\n          alert('Serial disconnected');\n          this.setState({connection: null}, async () => {\n            await this.connect(connectByPlugIn());\n            alert('Serial reconnected');\n          });\n        });\n        return true;\n    }\n  }\n\n  /**\n   * Insert the code snippet into {@link APIDemoState.editor} at the cursor.\n   * (If the user has never focused on the monaco editor before, the cursor is\n   * actually placed on the top left, so the snippet is inserted at the very\n   * start of the text.)\n   * Then, the cursor is placed after the inserted text which becomes selected.\n   * Also, the insertion operation is pushed onto the buffer and may be undone.\n   * Finally, the editor gets the focus.\n   */\n  onInsertIntoEditor(codeSnippet: string): void {\n    const editor = this.state.editor;\n    if (editor == null) {\n      alert('Editor is not loaded');\n      return;\n    }\n\n    const selection = editor.getSelection();\n    if (selection == null) { // Never happened\n      alert('selection is null');\n      return;\n    }\n    const position = selection.getPosition();\n    const range: monaco.IRange = {\n      startLineNumber: position.lineNumber,\n      endLineNumber: position.lineNumber,\n      startColumn: position.column,\n      endColumn: position.column,\n    };\n    editor.getModel()?.pushEditOperations(\n      [selection],\n      [\n        {\n          range,\n          text: codeSnippet,\n        }\n      ],\n      (_) => null,\n    ); // second parameter set to true to enable undo's\n    editor.focus();\n  }\n\n  summonDuck(): void {\n    this.setState({needDuck: true});\n  }\n\n  exileDuck(): void {\n    this.setState({needDuck: false});\n  }\n\n  async onStart(): Promise<void> {\n    if (!(await this.connect(connectByPariedDevice())))\n      await this.connect(connectBySelection());\n    //this.connect(connectByPlugIn());\n  }\n\n  removeErrorLineOfCode(): void {\n    const editor = this.state.editor!;\n    const ids = this.state.errorMonacoIDs;\n    if (ids != null) {\n      this.exileDuck();\n      editor.deltaDecorations(ids, []);\n      this.setState({\n        errorMonacoIDs: null\n      });\n    }\n  }\n\n  async onExec(outputStream: Stream<MicrobitOutput>): Promise<void> {\n    await outputStream.forEach(output => {\n      switch (output.kind) {\n        case 'NormalOutput':\n          this.setState({\n            output: output.outputChunk,\n            errorString: ''\n          });\n          break;\n        case 'ResetPressed':\n          console.log('ResetPressed');\n          break;\n        case 'ErrorMessage':\n          if (output.type !== 'KeyboardInterrupt') {\n            console.log(output.message);\n            const editor = this.state.editor!;\n            const errorMonacoID = editor.deltaDecorations([],\n              [\n                {\n                  range: new monaco.Range(output.line, 1, output.line, 1),\n                  options: {\n                    isWholeLine: true,\n                    className: 'Monaco-Error-Line-Of-Code'\n                  }\n                },\n              ]\n            );\n            this.setState({\n              errorString: 'Error on line ' + output.line + ':\\n' + output.type + ': ' + output.message,\n              errorLine: output.line,\n              errorMonacoIDs: errorMonacoID\n            });\n            this.summonDuck();\n          }\n      }\n    });\n  }\n\n  async onFlash(code: string): Promise<void> {\n    console.log('onFlash');\n    this.removeErrorLineOfCode();\n    await this.onExec(await this.state.connection!.interact.flash(code));\n    this.setState({}); // to update the buttons at the top\n  }\n\n  async onRun(code: string): Promise<void> {\n    console.log('onRun');\n    this.removeErrorLineOfCode();\n    await this.onExec(await this.state.connection!.interact.execute(code));\n    this.setState({});\n  }\n\n  /**\n   * Execute the supplied code, and return a promise resolving to the output\n   * stream of the micro:bit running the code.\n   */\n  async onRunCell(code: string): Promise<Stream<MicrobitOutput>> {\n    console.log('onRunCell');\n    this.setState({});\n    return await this.state.connection!.interact.execute(code);\n  }\n\n  async onReboot(): Promise<void> {\n    console.log('onReboot');\n    this.removeErrorLineOfCode();\n    await this.onExec(await this.state.connection!.interact.reboot());\n    this.setState({});\n  }\n\n  async onInterrupt(): Promise<void> {\n    await this.state.connection!.interact.interrupt();\n    this.setState({});\n  }\n}\n\nexport default APIDemo;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport APIDemo from './components/APIDemo';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <APIDemo/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}