{"version":3,"sources":["api/microbit/interface/message.ts","api/microbit/interface/config.ts","api/microbit/impl/helper/parser.ts","api/microbit/impl/helper/reader.ts","api/microbit/impl/interact.ts","api/microbit/impl/connect.ts","resources/Duck.jpg","duck-code.tsx","components/SideBar.tsx","components/TutorialViewer.tsx","components/APIDemo.tsx","resources/tutorial_list.ts","tutorial.ts","index.tsx"],"names":["MicrobitState","defaultConfig","connectOption","baudRate","dataBits","stopBits","parity","bufferSize","flowControl","requestOption","filters","usbVendorId","readOption","showLog","updateMs","cutLength","signalOption","validateAnswer","replLineReady","executionDone","executionStart","mainPYException","execException","waitMsBeforeReboot","SerialParser","portReader","config","startSignals","endSignals","this","safeReadUntil","a","outputStream","console","log","safeReadUntilWithUpdate","_","readErrors","result","str","write","kind","outputChunk","unsafeReadline","line1","lineNumberString","split","lineCount","messageLine","startsWith","line2split","line","parseInt","type","message","length","SerialReader","serialBuffer","termination","read","value","done","bufferLimit","len","substring","token","index","indexOf","before","substr","readLoop","includes","splitBufferOnFirst","readLoopWithCut","tokens","update","bufferUpdated","matchedTokenID","forEach","updateTimer","setInterval","clearInterval","ConnectedMicrobitInteract","port","portWriter","portParser","signal","state","portWriterStreamClosed","portReaderStreamClosed","Free","writable","encoder","TextEncoderStream","readable","pipeTo","catch","getWriter","decoder","TextDecoderStream","getReader","portReaderHelper","code","replace","readUntilNewReplLine","timeoutms","Promise","resolve","reject","setTimeout","getREPLLine","readUntilMicroPython","Busy","Error","codeInPythonString","codeToPythonString","Stream","readUntilExecStart","readUntilExecDone","then","finally","end","prefix","endMarker","output","text","lines","completions","slice","trim","completion","push","cond","timer","waitUntil","cancel","abort","close","createConnection","open","reason","portInteract","validateMicroPython","disconnect","interact","disconnection","addEventListener","onDisconnect","removeEventListener","connectBySelection","navigator","serial","requestPort","connectByPariedDevice","getPorts","ports","connectByPlugIn","checkUSBInfo","info","undefined","f","usbProductId","waitForPort","event","target","getInfo","theme","createMuiTheme","palette","primary","main","useStyles","makeStyles","button","flexGrow","border","borderRadius","color","height","padding","spacing","margin","textAlign","textTransform","xButton","backgroundColor","speech","jsonData","require","slideNames","Object","keys","executeCorrespondingCommand","commandString","props","href","rel","lineNumber","lineText","tutorialCode","strippedCodeLine","strippedTutorialLines","map","x","Fuse","includeMatches","isCaseSensitive","search","closestLine","highlights","writtenLine","perfectLine","bugCatcher","lengthWritten","lengthPerfect","highlightsWritten","iWritten","highlightsPerfect","iPerfect","locationPerfect","lookFor","locationWritten","pop","couple","long","iStart","lookAhead","i","highlightDiffLine","item","convert","readableDiffMessage","claimHaveHighlightedLine","convertedLine","shift","style","Typography","display","parseSpeech","filter","Boolean","parsedCommand","parseTextCommand","StartSlides","initialSlide","classes","useState","slide","setSlide","width","src","duck","alt","size","className","Grid","container","justify","alignItems","buttons","xs","ThemeProvider","Button","variant","onClick","link","inTutorial","closeDuck","MakeButtons","SideBar","isSidebarOpen","setIsSidebarOpen","Menu","Drawer","onClose","List","subheader","ListSubheader","component","id","tutorialList","list","location","title","ListItem","onTutorialSelection","ListItemText","PythonCode","isExpandable","highlightStart","highlightEnd","highlightedLines","fragments","isLineNumberValid","name","maxValue","isNaN","alert","lineNumbers","start","isExpanded","setState","canRun","onRunFinished","onRun","currentOutput","onInsertIntoEditor","join","darcula","language","showLineNumbers","getDisplayedText","startIcon","PlayArrow","disabled","bind","endIcon","Visibility","VisibilityOff","onToggleExpand","DoubleArrow","canInsertIntoEditor","React","Component","TutorialViewer","renderers","renderCode","canInsertInsertIntoEditor","markdown","APIDemo","tutorial","connection","editor","monaco","needDuck","errorString","errorLine","errorMonacoIDs","loader","init","t","beforeExecution","newLocation","tutorialResolver","handleTutorialPathChange","default","fetchCompletions","hasFreeConnection","getCompletions","languages","registerCompletionItemProvider","triggerCharacters","provideCompletionItems","model","position","__","getLineContent","j","column","startColumn","word","wordRange","endColumn","startLineNumber","endLineNumber","endsWith","suggestions","CompletionItemKind","Constant","label","insertText","range","suggestion","callback","isEnabled","getState","md","getTuteCode","raw_content","disable_duck","exileDuck","getValue","renderDuck","onRunCell","isEditorMounted","defaultLanguage","defaultValue","onMount","handleEditorDidMount","options","minimap","enabled","fontSize","wrapperClassName","readOnly","renderHeaderButton","onStart","onFlash","onInterrupt","hasBusyConnection","onReboot","summonDuck","renderTutorial","renderEditor","renderOutput","c","connect","codeSnippet","selection","getSelection","getPosition","getModel","pushEditOperations","focus","ids","updateOptions","deltaDecorations","errorMonacoID","isWholeLine","flash","onExec","execute","reboot","interrupt","pythonTute","path","defaultTutorialList","publicTutorialResolver","fetch","response","ok","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.652cd34b.chunk.js","sourcesContent":["import { ConnectedMicrobitInteract } from '../impl/interact';\n\n/**\n * A description of connection failure\n*/\nexport interface FailedConnection {\n  readonly kind: 'ConnectionFailure',\n  readonly type: 'Failed to Obtain Port' | 'Failed to Open Port' | 'No Response on Validation'\n  readonly reason: string\n}\n\nexport interface MicrobitConnection {\n  readonly kind: 'MicrobitConnection'\n  /**\n   * An object that allows us to interact with the connected micro:bit.\n   */\n  readonly interact: ConnectedMicrobitInteract\n\n  /**\n   * A promise that completes when the micro:bit connection is no longer active.\n   * This promise itself does not try to disconnect micro:bit.\n   */\n  readonly disconnection: Promise<void>\n}\n\nexport enum MicrobitState{\n  /**\n   * Nothing is running,\n   * \n   * Allowed: flash/execute/reboot\n   * \n   * Not Allowed: interrupt\n   */\n  Free,\n  /**\n   * Code is running,\n   * \n   * Allowed: Interrupt\n   * \n   * Not Allowed: flash/execute/reboot\n   */\n  Busy\n}\n\n/**\n * Data that we expect to receive from micro:bit as a result of execututing the flashed code.\n */\nexport type MicrobitOutput = NormalOutput | ErrorMessage | ResetPressed\n\n/**\n * A piece of content that is output to the standard output of micro:bit.\n */\nexport interface NormalOutput {\n  readonly kind: 'NormalOutput'\n  /**\n   * outputChunk is a new piece of output we have obtained from micro:bit,\n   * and may not correspond to a single print() executed on the device.\n   */\n  readonly outputChunk: string\n}\n\n/**\n * An object indicate reset button is pressed on the microbit\n * \n * OutputStream will continue to output\n */\nexport interface ResetPressed{\n  readonly kind: 'ResetPressed'\n}\n\nexport type MicroPythonExceptionType = 'AssertionError'\n  | 'AttributeError'\n  | 'Exception'\n  | 'ImportError'\n  | 'IndexError'\n  | 'KeyboardInterrupt'\n  | 'KeyError'\n  | 'MemoryError'\n  | 'NameError'\n  | 'NotImplementedError'\n  | 'OSError'\n  | 'RuntimeError'\n  | 'StopIteration'\n  | 'SyntaxError'\n  | 'SystemExit'\n  | 'TypeError'\n  | 'ValueError'\n  | 'ZeroDivisionError'\n  | 'IndentationError'\n\n/**\n * A description of a runtime error that occured on micro:bit\n */\nexport interface ErrorMessage {\n  readonly kind: 'ErrorMessage'\n  /**\n   * A integer indicating in which line of user code the error occurs\n   */\n  readonly line: number\n  /**\n   * A string indicating type of the exception\n   * For full list of types, see\n   * https://docs.micropython.org/en/latest/library/builtins.html#exceptions\n   */\n  readonly type: MicroPythonExceptionType\n  /**\n   * A *simple* explanation of the error\n   */\n  readonly message: string\n}\n","//TODO: Rename\n\nexport interface ManagerOption {\n  /**\n   * Parameter used to connect serial port. See `SerialOptions`\n   */\n  connectOption: SerialOptions\n  /**\n   * Parameter used for filtering serial port. See `SerialPortRequestOptions`\n   */\n  requestOption: SerialPortRequestOptions\n  /**\n   * Parameter used for reader class\n   */\n  readOption: readOption\n  /**\n   * Parameter used for parser class\n   */\n  signalOption: SignalOption\n}\n\nexport interface readOption {\n  /**\n   * If log should be printed to console\n   */\n  showLog: boolean,\n  /**\n   * Program output should be updated to the web every `updateMs` ms.\n   */\n  updateMs: number\n  /**\n   * Length of program output that should be kept.\n   * \n   * It is recommended to set this to 2 * maximum number of character in the textarea.\n   */\n  cutLength: number\n}\n\nexport interface SignalOption {\n  /**\n   * If log should be printed to console\n   */\n  showLog: boolean,\n  /**\n   * Answer to confirm this is a micropython device\n   */\n  validateAnswer: string,\n  /**\n   * A string printed by microbit serial repl\n   * Indicating waiting for user input code\n   */\n  replLineReady: string,\n  /**\n   * A string to be printed by `print` statement\n   * Before execution of user code\n   * Outputting is implemented by adding print statement before user code\n   */\n  executionStart: string,\n  /**\n   * A string to be printed by `print` statement \n   * After execution of given user code\n   * Outputting is implemented by adding print statement after user code\n   */\n  executionDone: string,\n  /**\n   * A string printed by microbit serial repl\n   * Indicating an error occured\n   */\n  mainPYException: string,\n  execException: string,\n  /**\n   * Ms before microbit is rebooted to run `main.py`\n   * Allowing output buffer to be emptied before reboot\n   * \n   * Not used right now\n   */\n  waitMsBeforeReboot: number,\n}\n\nexport const defaultConfig: ManagerOption = {\n  connectOption: {\n    baudRate: 115200,\n    dataBits: 8,\n    stopBits: 1,\n    parity: 'none',\n    bufferSize: 4096,\n    flowControl: 'none'\n  },\n  requestOption: {\n    filters: [\n      { usbVendorId: 0x0d28 }\n    ]\n  },\n  readOption: {\n    showLog: false,\n    updateMs: 50,\n    cutLength: 1000\n  },\n  //maybe consider using regexp?\n  signalOption: {\n    showLog: true,\n    validateAnswer: 'microbit',\n    replLineReady: '>>> ',\n    executionDone: 'Execute Done: 0x3f3f3f3f',\n    executionStart: 'Execution Start: 0x3f3f3f3f',\n    mainPYException: 'Traceback (most recent call last):\\r\\n  File \"main.py\", line ',\n    execException:   'Traceback (most recent call last):\\r\\n  File \"<stdin>\", line 1, in <module>\\r\\n  File \"<string>\", line ',\n    waitMsBeforeReboot: 1\n  }\n};","import Stream from 'ts-stream';\nimport { MicrobitOutput, MicroPythonExceptionType } from '../../interface/message';\nimport { SignalOption } from '../../interface/config';\nimport { SerialReader } from './reader';\n\n/**\n * This class provides functions to read serial output of a specific procedure,\n * by using the reader helper class.\n *\n * Below is its mechanism. Based on following input of code\n * ```\n * 1|Get REPL Line|>>>\n * 2|Setup Code   |>>> file=open('main.py','w');s='print(executionStart)\\\\r\\\\nprint(1)\\\\r\\\\nprint(executionStart)';file.write(s);file.close();from microbit import *;sleep(0);reset();\n * 3|#Byte Written|8\n * 4|executionStart\n * 5|Code output  |1\n * 6|executionDone\n * 6|MicroPython v1.13 on 2021-02-19; micro:bit v2.0.0-beta.4 with nRF52833\n * 7|Type \"help()\" for more information.\n * 8|>>>\n * ```\n *\n * Error Sample (Flashing)\n * ```\n * Traceback (most recent call last):\n * File \"main.py\", line 1, in <module>\n * NameError: name 'prit' isn't defined\n * ```\n *\n * REPL Sample (Running)\n * ```\n * Traceback (most recent call last):\n * File \"<stdin>\", line 1, in <module>\n * File \"<string>\", line 1, in <module>\n * NameError: name 'prit' isn't defined\n * ```\n */\nexport class SerialParser {\n  portReader: SerialReader;\n  config: SignalOption;\n  startSignals: string[];\n  endSignals: string[];\n\n  constructor(portReader: SerialReader, config: SignalOption) {\n    this.portReader = portReader;\n    this.config = config;\n    this.startSignals = [\n      config.executionStart + '\\r\\n',\n      config.mainPYException,\n      config.execException\n    ];\n    this.endSignals = [\n      config.executionDone + '\\r\\n',\n      config.executionStart + '\\r\\n',\n      config.mainPYException,\n      config.execException\n    ];\n\n  }\n\n  /**\n   * Read until new repl line is ready\n   */\n  readUntilNewReplLine(): Promise<void> {\n    return this.portReader.safeReadUntil(this.config.replLineReady);\n  }\n\n  /**\n   * Read until validation answer appears on serial\n   * This is used with a timer, disconnect the serial when expected \n   * validation answer not appearing on serial for a while\n   */\n  async readUntilMicroPython(): Promise<void> {\n    await this.portReader.safeReadUntil(this.config.validateAnswer);\n  }\n\n  /**\n   * Read until executionStart appears on serial\n   * - If there is no error, this Returns true\n   * - If (indentation/bracket) error occurs, the stream will be closed and false is returned\n   */\n  async readUntilExecStart(outputStream: Stream<MicrobitOutput>): Promise<boolean> {\n    if (this.config.showLog) console.log('Waiting for Execution Start');\n    const result = await this.portReader.safeReadUntilWithUpdate(\n      this.startSignals,\n      _ => null\n    );\n    if (result !== 0) {\n      this.readErrors(outputStream);\n      return false;\n    } else return true;\n  }\n\n  /**\n   * Read output of user code, periodically update output to stream\n   *\n   * Require executeStart printed earlier\n   */\n  async readUntilExecDone(outputStream: Stream<MicrobitOutput>): Promise<void> {\n    if (this.config.showLog) console.log('Execution Start');\n    // Now user code will run\n    // read until executionEnd signal appear on signal\n    let result = 1;\n    while (result === 1) {\n      result = await this.portReader.safeReadUntilWithUpdate(\n        this.endSignals,\n        str => outputStream.write({\n          kind: 'NormalOutput',\n          outputChunk: str\n        })\n      );\n      if (result === 1) outputStream.write({\n        kind: 'ResetPressed'\n      });\n    }\n    if (result !== 0) await this.readErrors(outputStream);\n    if (this.config.showLog) console.log('Execution done');\n  }\n\n  /**\n   * Read and parse micropython error output\n   */\n  async readErrors(outputStream: Stream<MicrobitOutput>): Promise<void> {\n    if (this.config.showLog) console.log('Execution Error');\n    // line1 indicates in which line of user code exception occurred\n    // which is first line after mainPYException and execException\n    const line1 = await this.portReader.unsafeReadline();\n    const lineNumberString = line1.split(',', 2)[0];\n    // messageLine is in the form of 'ErrorType:ErrorMessage'\n    // exec is used in user code, the line following line1 may not be messageLine\n    let lineCount = 0;\n    let messageLine = '';\n    while (lineCount === 0 || messageLine.startsWith('  ')) {\n      messageLine = await this.portReader.unsafeReadline();\n      lineCount += 1;\n    }\n    const line2split = messageLine.split(': ');\n    outputStream.write({\n      kind: 'ErrorMessage',\n      line: parseInt(lineNumberString) - 1,\n      type: line2split[0] as MicroPythonExceptionType,\n      message: (line2split.length === 1) ? '' : line2split[1]\n    });\n  }\n}","import { readOption } from '../../interface/config';\n\n/**\n * This class provide convenient function for reading serial output.\n */\nexport class SerialReader {\n  private serialBuffer = ''\n  private portReader: ReadableStreamDefaultReader<string>\n  private config: readOption\n\n  constructor(portReader: ReadableStreamDefaultReader<string>, config: readOption) {\n    this.portReader = portReader;\n    this.config = config;\n  }\n\n  /**\n   * Read from serial until termination is true.\n   *\n   * Buffer will not be cut in this function.\n   */\n  private async readLoop(termination: (text: string) => boolean): Promise<void> {\n    if (this.config.showLog) console.log(this.serialBuffer);\n    while (!termination(this.serialBuffer)) {\n      const {value, done} = await this.portReader.read();\n      if (done) break;\n      this.serialBuffer += value;\n      if (this.config.showLog) console.log(this.serialBuffer);\n    }\n  }\n\n  /**\n   * Read from serial until termination is true.\n   *\n   * Assuming only last *bufferLimit* characters decides termination,\n   * this readLoop cuts unnecessary part of the buffer\n   */\n  private async readLoopWithCut(termination: (text: string) => boolean, bufferLimit: number): Promise<void> {\n    if (this.config.showLog) console.log(this.serialBuffer);\n    while (!termination(this.serialBuffer)) {\n      const len = this.serialBuffer.length;\n      if (len >= bufferLimit) this.serialBuffer = this.serialBuffer.substring(len - bufferLimit);\n      const {value, done} = await this.portReader.read();\n      if (done) break;\n      this.serialBuffer += value;\n      if (this.config.showLog) console.log(this.serialBuffer);\n    }\n  }\n\n  /**\n   * Split *buffer* on first occurrence of token.\n   *\n   * PRE: buffer = before + token + after\n   * buffer = after\n   * return before\n   */\n  private splitBufferOnFirst(token: string): string {\n    const index = this.serialBuffer.indexOf(token);\n    const before = this.serialBuffer.substr(0, index);\n    this.serialBuffer = this.serialBuffer.substr(index + token.length);\n    return before;\n  }\n\n  /**\n   * This function read a line from serial,\n   * and returns that line.\n   *\n   * You should only use this function when you are certain about what's coming from serial.\n   */\n  async unsafeReadline(): Promise<string> {\n    const token = '\\r\\n';\n    await this.readLoop(str => str.includes(token));\n    return this.splitBufferOnFirst(token);\n  }\n\n  /**\n   * This function reads until token appears in serial output, and returns nothing.\n   *\n   * Reading is optimized by cutting unnecessary string,\n   * so length of buffer < length of token.\n   *\n   * This is useful when reading potential long output,\n   * and the content before token does not matter\n   */\n  async safeReadUntil(token: string): Promise<void> {\n    await this.readLoopWithCut(str => str.includes(token), token.length);\n    this.splitBufferOnFirst(token);\n  }\n\n  /**\n   * This function reads until one of the token from the token array appears in serial output,\n   * and returns the token that appear in serial.\n   * Its content is also periodically updates to upstream and when the token appears.\n   *\n   * This is useful when reading potential long output,\n   * and recent content of some length matters.\n   *\n   * Consider the following cases, which make the implementation necessary.\n   *\n   * `while True: print(1)`\n   * A lot of output\n   *\n   * `a=input(\"You name:\")`\n   * New content only come out after every thing gets outputted\n   * (So user can input)\n   */\n  async safeReadUntilWithUpdate(tokens: Array<string>, update: (text: string) => void): Promise<number> {\n    let bufferUpdated = false;\n    let matchedTokenID = -1;\n    const termination = (str: string) => {\n      bufferUpdated = true;\n      tokens.forEach((token, index) => {\n        if (str.includes(token)) matchedTokenID = index;\n      });\n      return matchedTokenID !== -1;\n    };\n    const updateTimer = setInterval(() => {\n      if (bufferUpdated) {\n        update(this.serialBuffer);\n        bufferUpdated = false;\n      }\n    }, this.config.updateMs);\n    await this.readLoopWithCut(termination, this.config.cutLength);\n    clearInterval(updateTimer);\n    update(this.splitBufferOnFirst(tokens[matchedTokenID]));\n    return matchedTokenID;\n  }\n}\n","import Stream from 'ts-stream';\nimport { ManagerOption, SignalOption } from '../interface/config';\nimport { MicrobitOutput, MicrobitState } from '../interface/message';\nimport { SerialParser } from './helper/parser';\nimport { SerialReader } from './helper/reader';\n\nconst ctrlC = '\\x03';\n\nexport class ConnectedMicrobitInteract {\n  port: SerialPort;\n  portWriter!: WritableStreamDefaultWriter<string>;\n  portReader!: ReadableStreamDefaultReader<string>;\n  portParser!: SerialParser\n  signal: SignalOption;\n  state: MicrobitState;\n\n  readonly portWriterStreamClosed: Promise<void> | null = null;\n  readonly portReaderStreamClosed: Promise<void> | null = null;\n\n  constructor(port: SerialPort, config: ManagerOption) {\n    this.port = port;\n    this.signal = config.signalOption;\n    this.state = MicrobitState.Free;\n    if (port.writable != null) {\n      const encoder = new TextEncoderStream();\n      this.portWriterStreamClosed = encoder.readable.pipeTo(port.writable)\n        .catch((_) => {\n          console.log('disconnected in pipe');\n        });\n      this.portWriter = encoder.writable.getWriter();\n    }\n    if (port.readable != null) {\n      const decoder = new TextDecoderStream();\n      this.portReaderStreamClosed = port.readable.pipeTo(decoder.writable)\n        .catch((_) => {\n          console.log('disconnected in pipe');\n        });\n      this.portReader = decoder.readable.getReader();\n\n      const portReaderHelper = new SerialReader(this.portReader, config.readOption);\n      this.portParser = new SerialParser(portReaderHelper, config.signalOption);\n    }\n  }\n\n  getState(): MicrobitState {\n    return this.state;\n  }\n\n  /**\n   * Convert a javascript string of python code to readable python code\n   */\n  private codeToPythonString(code: string): string {\n    /* \n    replaceAll From up to down\n      (1) user-used escape character. e.g. [\\][t]\n        This should still be [\\][t] in main.py\n        [\\][\\][t] in python string\n      (2) user-used [']\n        Because code is wrapped with ''\n        [\\]['] in python string\n      (3) new line created by user\n        Should be [\\r][\\n] in main.py\n        [\\][r][\\][n] in python string\n    */\n    return (\n      'print(\\'' + this.signal.executionStart + '\\')'\n      + '\\r\\n' + code + '\\r\\n'\n      + 'print(\\'' + this.signal.executionDone + '\\')'\n    ).replace(/\\\\/g, '\\\\\\\\')\n      .replace(/'/g, '\\\\\\'')\n      .replace(/\\r?\\n/g, '\\\\r\\\\n');\n  }\n\n  /**\n   * Send ctrlC to stop code execution\n   * - If no code was running, new REPL line starts\n   * - If code was running, then keyboardInterrupt appears\n   *    Serial input unavailable for a few ms, then new REPL line starts.\n   * Returns when the REPL line is clean and usable\n   */\n  private async getREPLLine(): Promise<void> {\n    await this.portWriter.write(ctrlC);\n    await this.portParser.readUntilNewReplLine();\n  }\n\n  validateMicroPython(timeoutms:number): Promise<boolean> {\n    return new Promise(async (resolve,reject)=>{\n      setTimeout(()=>{\n        resolve(false);\n      },timeoutms);\n      await this.getREPLLine();\n      await this.portWriter.write('import sys;sys.platform\\r');\n      await this.portParser.readUntilMicroPython();\n      resolve(true);\n    });\n  }\n\n  /**\n   * Flash ROM of the connected micro:bit.\n   *\n   * The flashing consists of two stages of flashing the code followed by a reboot.\n   * The promise completes when reboot is done, resulting in a stream of outputs from microbit.\n   */\n  async flash(code: string): Promise<Stream<MicrobitOutput>> {\n    /*Whole procedure with workaround note\n      - Get a clean REPL line, see getREPLLine()\n      - Send code to `main.py` to REPL\n          Observation: Microbit serial lose characters when multiple lines are inputted\n          Workaround: Put all code on one line\n          The logic might be:\n            Microbit does not have enough pin on the chip for serial hardware flow control.\n            So computer has no way of knowing microbit buffer is full.\n            And when the buffer is full, microbit serial start to lose character.\n\n            When all code is on one line, microbit does not do any hard work until \\r entered\n            Less likely for the buffer to be full and lose character\n      - Print(replDone)\n          On receiving replDone, manager knows microbit finished writing to main.py\n          It is rebooting and all later output are program output\n    */\n    if (this.state === MicrobitState.Busy) throw Error('Flash Failed: Device not free');\n    this.state = MicrobitState.Busy;\n\n    const codeInPythonString = this.codeToPythonString(code);\n    const outputStream = new Stream<MicrobitOutput>();\n\n    await this.getREPLLine();\n    await this.portWriter.write(\n      'file=open(\\'main.py\\',\\'w\\');'\n      + 's=\\'' + codeInPythonString + '\\';'\n      + 'file.write(s);'\n      + 'file.close();'\n      + 'from microbit import *;'\n      + 'reset()\\r'\n    );\n    if (await this.portParser.readUntilExecStart(outputStream)) {\n      this.portParser.readUntilExecDone(outputStream)\n        .then(() => {\n          this.state = MicrobitState.Free;\n        })\n        .finally(() => {\n          outputStream.end();\n        });\n    } else this.state = MicrobitState.Free;\n    return outputStream;\n  }\n\n  /**\n   * Run code in REPL.\n   * Microbit is not rebooted. So all previous variables are kept.\n   */\n  async execute(code: string): Promise<Stream<MicrobitOutput>> {\n    if (this.state === MicrobitState.Busy) throw Error('Execute Failed: Device not free');\n    this.state = MicrobitState.Busy;\n\n    const codeInPythonString = this.codeToPythonString(code);\n    const outputStream = new Stream<MicrobitOutput>();\n\n    await this.getREPLLine();\n    await this.portWriter.write(\n      's=\\'' + codeInPythonString + '\\';'\n      + 'exec(s)\\r'\n    );\n    if (await this.portParser.readUntilExecStart(outputStream)) {\n      this.portParser.readUntilExecDone(outputStream)\n        .then(() => {\n          this.state = MicrobitState.Free;\n        })\n        .finally(() => {\n          outputStream.end();\n        });\n    } else this.state = MicrobitState.Free;\n    return outputStream;\n  }\n\n  async getCompletions(prefix: string): Promise<string[]> {\n    if (this.state === MicrobitState.Busy) throw Error('Autocomplete Failed: Device not free');\n    this.state = MicrobitState.Busy;\n\n    const endMarker = 'END MARKER';\n    let output = '';\n\n    await this.getREPLLine();\n    await this.portWriter.write(`${prefix}\\t`);\n    await this.portWriter.write(endMarker);\n    await this.portParser.portReader.safeReadUntilWithUpdate(\n      [endMarker],\n      (text) => output = text,\n    );\n    await this.getREPLLine();\n\n    this.state = MicrobitState.Free;\n    const lines = output.split(/\\n/g);\n    if (lines.length === 1) {\n      const text = lines[0];\n      // No completions found\n      if (text === prefix) return [];\n      // Identified exactly one completion\n      else return [text];\n    }\n    const completions: string[] = [];\n    for (const line of lines.slice(1, -1)) {\n      for (const completion of line.trim().split(/\\s+/g)) {\n        if (completion.length > 0)\n          completions.push(completion.trim()); // I miss concatMap\n      }\n    }\n    return completions;\n  }\n\n  /**\n   * Reboots the connected micro:bit.\n   * The promise completes with a stream of outputs from microbit.\n   */\n  async reboot(): Promise<Stream<MicrobitOutput>> {\n    if (this.state === MicrobitState.Busy) throw Error('Reboot Failed: Device not free');\n    this.state = MicrobitState.Busy;\n\n    await this.getREPLLine();\n    await this.portWriter.write(\n      'from microbit import *;'\n      + 'reset()\\r'\n    );\n    const outputStream = new Stream<MicrobitOutput>();\n    if (await this.portParser.readUntilExecStart(outputStream)) {\n      this.portParser.readUntilExecDone(outputStream)\n        .then(() => {\n          this.state = MicrobitState.Free;\n        })\n        .finally(() => {\n          outputStream.end();\n        });\n    } else this.state = MicrobitState.Free;\n    return outputStream;\n  }\n\n  private waitUntil(cond: () => boolean): Promise<void> {\n    return new Promise((resolve, _) => {\n      const timer = setInterval(() => {\n        if (cond()) {\n          clearInterval(timer);\n          resolve();\n        }\n      }, 200);\n    });\n  }\n\n  /**\n   * Send an interrupt signal the connected micro:bit.\n   * This will try to stop any python code running on the micro:bit.\n   *\n   * The promise completes when the interruption is successful.\n   * If code is being executed, then there should be a ErrorMessage in the outputStream.\n   */\n  async interrupt(): Promise<void> {\n    if (this.state === MicrobitState.Free) throw Error('Interrupt Failed: Device not running code');\n    await this.portWriter.write(ctrlC);\n    await this.waitUntil(() => this.state === MicrobitState.Free);\n    //Not reading for new REPL line here\n    //because portParser might already be reading.\n  }\n\n  /**\n   * Disconnect the paired micro:bit.\n   */\n  async disconnect(): Promise<void> {\n    console.log('Disconnection initiated:');\n\n    await this.portReader.cancel('App will unmount');\n    await this.portReaderStreamClosed;\n    console.log('Reader closed;');\n\n    await this.portWriter.abort('App will unmount');\n    await this.portWriterStreamClosed;\n    console.log('Writer closed.');\n\n    await this.port.close();\n  }\n}","import { serial } from 'web-serial-polyfill';\nimport { defaultConfig, ManagerOption } from '../interface/config';\nimport { FailedConnection, MicrobitConnection } from '../interface/message';\nimport { ConnectedMicrobitInteract } from './interact';\n\n/**\n * Check if browser support WebSerial\n * Return true if WebSerial is supported\n * \n * If WebSerial is not supported but WebUSB is supported,\n * this function applys polyfill from Google.\n */\nexport function checkCompatability(): boolean {\n  if ('serial' in navigator) return true;\n  else {\n    if ('usb' in navigator) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (navigator as any).serial = serial;\n      return true;\n    } else return false;\n  }\n}\n\n/**\n * Given a unopenned serial port and configuration object,\n * Create a MicrobitConnection object\n */\nasync function createConnection(port: SerialPort, config: ManagerOption): Promise<MicrobitConnection | FailedConnection> {\n  try {\n    await port.open(config.connectOption);\n  } catch (error) {\n    return {\n      kind: 'ConnectionFailure',\n      type: 'Failed to Open Port',\n      reason: error.message\n    };\n  }\n  const portInteract = new ConnectedMicrobitInteract(port, config);\n  /*\n    For dev, be aware that the first few seconds you launch a chrome,\n    webserial will not respond promptly, this can lead to a false negative\n\n    For production build, this timeout can be lower. \n  */\n  if(!(await portInteract.validateMicroPython(3000))) {\n    await portInteract.disconnect();\n    return {\n      kind: 'ConnectionFailure',\n      type: 'No Response on Validation',\n      reason: 'Possibly not a microbit with MicroPython'\n    };\n  }\n  \n  return {\n    kind: 'MicrobitConnection',\n    interact: portInteract,\n    disconnection: new Promise((resolve, _) => {\n      const onDisconnect = (_: Event) => {\n        console.log('disconnected');\n        port.removeEventListener('disconnect', onDisconnect);\n        resolve();\n      };\n      port.addEventListener('disconnect', onDisconnect);\n    })\n  };\n}\n\n/**\n * Create a MicrobitConnection object\n * By selecting a serial port in the native permission window.\n * \n * **This must be followed by a UserGesture within a time period**\n * \n * *In some rare cases, calling other function before this can result in a UserGesture Error*\n */\nexport async function connectBySelection(config: ManagerOption = defaultConfig): Promise<MicrobitConnection | FailedConnection> {\n  let port: SerialPort;\n  try {\n    port = await navigator.serial.requestPort(config.requestOption);\n  } catch (error) {\n    return {\n      kind: 'ConnectionFailure',\n      type: 'Failed to Obtain Port',\n      reason: error.message\n    };\n  }\n  return createConnection(port, config);\n}\n\n/**\n * Create a MicrobitConnection object\n * By connecting to a paried serial device\n * This does not require selecting device in the native window.\n */\nexport async function connectByPariedDevice(config: ManagerOption = defaultConfig): Promise<MicrobitConnection | FailedConnection> {\n  const ports = await navigator.serial.getPorts();\n  if (ports.length === 1) return createConnection(ports[0], config);\n  else if(ports.length === 0) return {\n    kind: 'ConnectionFailure',\n    type: 'Failed to Obtain Port',\n    reason: 'No Paired Serial Devices Available'\n  }; else return {\n    kind: 'ConnectionFailure',\n    type: 'Failed to Obtain Port',\n    reason: 'Multiple Paired Serial Devices Available'\n  };\n}\n\n/**\n * Create a MicrobitConnection object\n * By user plugging the device\n */\nexport async function connectByPlugIn(config: ManagerOption = defaultConfig): Promise<MicrobitConnection | FailedConnection> {\n  //Given serialPortInfo, check if it agrees with filters\n  function checkUSBInfo(info: SerialPortInfo, filters: SerialPortFilter[] | undefined): boolean {\n    if (filters === undefined) return true; //no constraint\n    else {\n      for (const f of filters) {\n        //for two property, no constraint or equal\n        if (f.usbProductId === undefined || f.usbProductId === info.usbProductId)\n          if (f.usbVendorId === undefined || f.usbVendorId === info.usbVendorId)\n            return true;\n      }\n      return false;\n    }\n  }\n  \n  return new Promise((resolve, _) => {\n    /**\n     * A event listener function\n     * Resolves the promise when a device is plugged in\n     */\n    const waitForPort = async(event: Event) => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const port: SerialPort = (event as any).port || event.target;\n      if (checkUSBInfo(port.getInfo(), config.requestOption.filters)) {\n        navigator.serial.removeEventListener('connect', waitForPort);\n        resolve(createConnection(port, config));\n      }\n    };\n    //add the listener\n    navigator.serial.addEventListener('connect', waitForPort);\n  });\n}","export default __webpack_public_path__ + \"static/media/Duck.d495e477.jpg\";","/* eslint @typescript-eslint/no-var-requires: \"off\" */\n\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { createMuiTheme, makeStyles } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Fuse from 'fuse.js';\nimport PropTypes from 'prop-types';\nimport { default as React, useState } from 'react';\nimport * as Space from 'react-spaces';\nimport duck from './resources/Duck.jpg';\nimport './styles.css';\n\ntype DuckProps = {\n  closeDuck(): void,\n  lineNumber?: number,\n  lineText?: string,\n  tutorialCode?: string\n}\n\ntype SlideButton = {\n  link: string,\n  text: string\n}\n\n\n/**\n * Specifies the colour used for the buttons in the Duck\n */\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // Yellow\n      main: '#ffcc00', // feel free to change this colour\n    }\n  },\n});\n\n\nconst useStyles = makeStyles( (theme) => ({\n  button: {\n    flexGrow: 1,\n    border: 1,\n    borderRadius: 3,\n    color: 'black',\n    height: 48,\n    padding: theme.spacing(2),\n    margin: 8,\n    textAlign: 'center',\n    textTransform: 'none'\n  },\n  xButton: { // The red X that closes the Duck\n    color: 'white',\n    backgroundColor: '#ff0000',\n    height: 20,\n    padding: theme.spacing(2),\n    textAlign: 'center'\n  },\n  speech: {\n    flexGrow: 1,\n    border: 1,\n    borderRadius: 3,\n    color: 'black',\n    padding: theme.spacing(2),\n    margin: 8,\n    textAlign: 'left'\n  }\n}));\n\nconst jsonData = require('./resources/duck_flowchart.json');\nconst slideNames = Object.keys(jsonData);\n\n/**\n * Generates part of the Duck's text, by running a command specified as a string.\n * @param commandString contains the command to run\n * @param props \n * @returns the text to be embedded in the Duck's explanation, after executing the command\n */\nfunction executeCorrespondingCommand(commandString: string, props: DuckProps) {\n  if (commandString === 'link_to_tutorial_about_errors') {\n    return (\n      <a href=\"https://example.com/faq.html\" target=\"_blank\" rel=\"noreferrer\">\n        Tutorial about errors\n      </a>\n    );\n  }\n  else if (commandString === 'get_readable_diff') {\n    return readableDiffMessage(props);\n\n  }\n  else if (commandString === 'get_error_line_no_and_highlight') {\n    return claimHaveHighlightedLine(props);\n  }\n  else {\n    return commandString;\n  }\n} \n\n/**\n * Returns either a claim that the correct line has been highlighted, or a statement that no error message is visible.\n */\nfunction claimHaveHighlightedLine(props: DuckProps) {\n  if (props.lineNumber) {\n    return (<div>\n      Your error is on line \n      {' ' + props.lineNumber}, \n      so I’ve highlighted that line in the editor. \n      What type of error is displayed?\n    </div>);\n  }\n  else {\n    return ('I cannot see your error message. Perhaps press \\'RUN\\' again, and double check that an error message is visible?');\n  }\n\n}\n\n/**\n * Finds the closest matching line in the corresponding tutorial.\n * @returns a visual difference between the student's and tutorial's code, \n * using highlighting, or a statment that no similar line has been found in the tutorial.\n */\nfunction readableDiffMessage(props: DuckProps) {\n  if (props.lineNumber && props.lineText && props.tutorialCode) {\n    const strippedCodeLine = props.lineText.trim();\n    const strippedTutorialLines = props.tutorialCode.split('\\n').map(x => x.trim());\n    const fuse = new Fuse(strippedTutorialLines, { includeMatches: true, isCaseSensitive: true });\n    const result = fuse.search(strippedCodeLine);\n    if (result.length > 0) {\n      const closestLine = result[0];\n      const highlights = highlightDiffLine(strippedCodeLine, closestLine.item);\n      return (<div>\n        The closest matching line in the tutorial is: <br />\n        {convert(closestLine.item, highlights[1])} <br />\n        whereas your line reads: <br />\n        {convert(strippedCodeLine, highlights[0])}\n      </div>);\n    }\n    else {\n      return ('Unfortunately, your line does not look like any of the lines in the tutorial.');\n    }\n  }\n  else return ('I cannot see your error message. Perhaps press \\'RUN\\' again, and double check that an error message is visible?');\n}\n\n/** \n * Returns two arrays, representing which indices to highlight in the student's erroneous code line \n * and corresponding tutorial line. \n * @param writtenLine : The student's erroneous line of code\n * @param perfectLine : The corresponding line in the tutorial\n */\nfunction highlightDiffLine(writtenLine: string, perfectLine: string): [number[], number[]] {\n  let bugCatcher = false;  // For catching a small bug\n  const lengthWritten = writtenLine.length; const lengthPerfect = perfectLine.length;\n  const highlightsWritten = []; let iWritten = 0;\n  const highlightsPerfect = []; let iPerfect = 0;\n  while (iWritten < lengthWritten && iPerfect < lengthPerfect) {\n    if (writtenLine[iWritten] === perfectLine[iPerfect]) {\n      iWritten++;\n      iPerfect++;\n    }\n    else {\n      if (iWritten + 1 === lengthWritten || iPerfect + 1 === lengthPerfect) {\n        highlightsWritten.push(iWritten); iWritten++;\n        highlightsPerfect.push(iPerfect); iPerfect++;\n\n        // Small exception when final character of writtenLine is the same as final character of perfectLine\n        // but we've only reached the end of writtenLine\n        if (!(iPerfect + 1 === lengthPerfect)) {\n          bugCatcher = true;\n        }\n      }\n      else {\n        // Checks the next 10 characters of perfectLine for any matches with the slice of writtenLine\n        const locationPerfect: number | undefined = lookFor(writtenLine.slice(iWritten, iWritten + 2), perfectLine, iPerfect, 10);\n        // Checks the next 10 characters of writtenLine for any matches with the slice of perfectLine\n        const locationWritten: number | undefined = lookFor(perfectLine.slice(iPerfect, iPerfect + 2), writtenLine, iWritten, 10);\n        if (locationWritten) {\n          while (iWritten < locationWritten) { highlightsWritten.push(iWritten); iWritten++; }\n          iWritten += 2;\n          iPerfect += 2;\n        } else if (locationPerfect) {\n          while (iPerfect < locationPerfect) { highlightsPerfect.push(iPerfect); iPerfect++; }\n          iWritten += 2;\n          iPerfect += 2;\n        } else {\n          highlightsWritten.push(iWritten); iWritten++;\n          highlightsPerfect.push(iPerfect); iPerfect++;\n        }\n      }\n    }\n  }\n\n  while (iWritten < lengthWritten) {\n    highlightsWritten.push(iWritten);\n    iWritten++;\n  }\n  while (iPerfect < lengthPerfect) {\n    highlightsPerfect.push(iPerfect);\n    iPerfect++;\n  }\n\n  // Small bugfix, solution is to check the final characters to see if they're the same\n  if (bugCatcher && writtenLine[iWritten - 1] === perfectLine[iPerfect - 1]) {\n    highlightsWritten.pop();\n    highlightsPerfect.pop();\n  }\n\n  function lookFor(couple: string, long: string, iStart: number, lookAhead: number) {  // couple should be 2 characters long\n    for (let i = iStart; i !== iStart + lookAhead && i + 1 < long.length; i++) {\n      if (long[i] === couple[0] && long[i + 1] === couple[1]) { return i; }\n    }\n    return undefined;\n  }\n\n  return [highlightsWritten, highlightsPerfect];\n}\n\n/**\n * Returns line as a JSX.Element with the highlights indexes all highlighted\n */\nfunction convert(line: string, highlights: number[]) {\n  const convertedLine = [];\n\n  for (let i = 0; i < line.length; i++) {\n    if (i === highlights[0]) {\n      highlights.shift();\n      convertedLine.push(<span style={{ backgroundColor: 'yellow' }}>{\n        <Typography display=\"inline\">\n          {line[i]}\n        </Typography>\n      }</span>);\n    } else {\n      convertedLine.push(<span>{\n        <Typography display=\"inline\">\n          {line[i]}\n        </Typography>\n      }</span>);\n    }\n  }\n  return convertedLine;\n}\n\n/** \n * If the argument string is surrounded in curly braces, remove the braces and execute the corresponding command. \n * Otherwise, return the argument string unchanged.\n * @param commandString is a SUBSTRING of the Duck's speech, either fully enclosed in curly braces or containing \n *                      no curly braces (but no strict substring of commandString should be enclosed in curly braces.)\n*/\nfunction parseTextCommand(commandString: string, props: DuckProps) {\n  let parsedCommand: string|JSX.Element = commandString;\n  if (commandString.startsWith('{')) { \n    // must also then end with '}'\n    const rawCommand = commandString.slice(1, -1); // remove surrounding braces\n    parsedCommand = executeCorrespondingCommand(rawCommand, props);\n  }\n  return parsedCommand;\n}\n\n/**\n * Takes as input the Duck's speech for a given slide, and returns \n * the same speech but with any embedded commands in braces replaced with\n * the result of applying those commands.\n */\nfunction parseSpeech(speech: string, props: DuckProps) {\n  const re = /(\\{[\\S\\s]+?\\})/g;\n  const splitSpeech = speech.split(re).filter(Boolean);\n  const parsedSpeech = splitSpeech.map(x => parseTextCommand(x, props));\n  return parsedSpeech;\n}\n\nfunction inTutorial(props: DuckProps): boolean {\n  return props.tutorialCode !== undefined && props.tutorialCode !== '';\n}\n\n/**\n * Renders the Duck, starting from the specified slide.\n */\nfunction MakeButtons(initialSlide: string, props: DuckProps) {\n  const classes = useStyles();\n  const [slide, setSlide] = useState(initialSlide);  \n  // Here useState is a 'Hook' (from React) which means the slide variable is updated when the setSlide function is run\n\n  return (\n    <Space.Fixed height={600} width={600}>\n      <div>\n        <img src={duck} height={600} width={600} alt=\"cartoon duck\" />\n      </div>\n\n      <Space.Left size={60}></Space.Left>\n\n      <Space.Fill>\n        <Space.Top size={20}></Space.Top>\n        <Space.Fill>\n          <Space.Fill>\n            <Typography className={classes.speech}>\n              {parseSpeech(jsonData[slide].speech, props)}\n            </Typography>\n            <Grid container justify=\"center\" alignItems=\"flex-start\" spacing={2}>\n              {jsonData[slide].buttons.map(function (button: SlideButton) {\n                return (\n                  <div key={button.text}>\n                    <Grid item xs>\n                      <ThemeProvider theme={theme}>\n                        <Button\n                          className={classes.button}\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            if (button.link === '{inTutorial ? Ask if want to compare : Duck gives up}') {\n                              const link = inTutorial(props) ? 'Ask if want to compare' : 'Duck gives up';\n                              setSlide(link);\n                            } else if (button.link) {\n                              setSlide(button.link);\n                            } else {  // this runs if button.link is null\n                              props.closeDuck();\n                            }\n                          }}\n                        >\n                          {button.text}\n                        </Button>\n                      </ThemeProvider>\n                    </Grid>\n                  </div>\n                );\n              })}\n            </Grid>\n          </Space.Fill>\n        </Space.Fill>\n        <Space.Bottom size={200}></Space.Bottom>\n      </Space.Fill>\n      <Space.Right size={250}>\n        <Space.Right size={430}>\n          <Space.Bottom size={600}>\n            <Button\n              className={classes.xButton}\n              variant=\"contained\"\n              size=\"small\"\n              onClick={() => {\n                props.closeDuck();\n              }\n              }\n            >\n              {'X'}\n            </Button>\n          </Space.Bottom>\n        </Space.Right>\n      </Space.Right>\n    </Space.Fixed>\n  );\n}\nMakeButtons.propTypes = {\n  closeDuck: PropTypes.func\n};\n\nexport default function StartSlides(props: DuckProps): JSX.Element {\n  return MakeButtons(slideNames[0], props);\n}\n","/* eslint-disable react/display-name, jsx-a11y/click-events-have-key-events */\nimport { Button, Drawer, List, ListItem, ListItemText, ListSubheader } from '@material-ui/core';\nimport { Menu } from '@material-ui/icons';\nimport React, { useState } from 'react';\nimport { TutorialList, TutorialLocation } from '../tutorial';\n\nexport interface SideBarProps {\n  tutorialList: TutorialList\n  onTutorialSelection: (path: TutorialLocation) => void\n}\n\nexport function SideBar(props: SideBarProps): JSX.Element {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  return (\n    <>\n      <Button onClick={() => setIsSidebarOpen(true)}>\n        <Menu/>\n        Select Tutorial\n      </Button>\n      <Drawer open={isSidebarOpen} onClose={() => setIsSidebarOpen(false)}>\n        <List subheader={\n          <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n            <h2>\n              Available tutorials\n            </h2>\n          </ListSubheader>\n        }>\n          {props.tutorialList.list.map((location) => {\n            const { title } = location;\n            return (\n              <ListItem button key={title} onClick={() => props.onTutorialSelection(location)}>\n                <ListItemText primary={title} />\n              </ListItem>\n            );\n          })}\n        </List>\n      </Drawer>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport './TutorialViewer.css';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { Button } from '@material-ui/core';\nimport { DoubleArrow, PlayArrow, Visibility, VisibilityOff } from '@material-ui/icons';\nimport { MicrobitOutput } from '../api/microbit/interface/message';\nimport { Stream } from 'ts-stream';\n\n\n/**\n * Readonly Python code cell, with buttons to:\n * - toggle between viewing the full {@link PythonCodeProps.code} and only the\n *   highlighted fragment, as specified by `# LINES {start}-{end}` (counting\n *   from 1 like humans do, both ends inclusive) on the first line of the code;\n * - execute the full {@link PythonCodeProps.code} using\n *   {@link PythonCodeProps.onRun} and display the output and error message, if\n *   {@link PythonCodeProps.canRun} returns true;\n * - insert the highlighted fragment into the editor using\n *   {@link PythonCodeProps.onInsertIntoEditor}, if\n *   {@link PythonCodeProps.canInsertIntoEditor} returns true.\n *\n * If this meta-comment is missing or not in the correct format, the toggle\n * views button will be hidden, and the highlighted fragment is the whole\n * code for the purpose of {@link PythonCodeProps.onInsertIntoEditor}.\n */\nclass PythonCode extends React.Component<PythonCodeProps, PythonCodeState> {\n  /**\n   * Whether the first line of {@link PythonCodeProps.code} is a comment\n   * specifying the extent of the highlighted fragment.\n   * If false, the toggle button is hidden away.\n   */\n  readonly isExpandable: boolean;\n\n  /**\n   * Starting index of the highlighted fragment in {@link lines},\n   * counting from 0, included.\n   * Defaults to 0.\n   */\n  readonly highlightStart: number;\n\n  /**\n   * Ending index of the highlighted fragment in {@link lines},\n   * counting from 0, excluded.\n   * Defaults to {@link lines}.length.\n   */\n  readonly highlightEnd: number;\n\n  /**\n   * The code split by new lines, stored here to avoid repeated computation.\n   */\n  readonly lines: string[];\n\n  /**\n   * The highlighted lines, AKA highlighted fragment, i.e.,\n   * {@link lines}[{@link highlightStart}, {@link highlightEnd}).\n   */\n  readonly highlightedLines: string[];\n\n  /**\n   * Parses the meta-comment specifying the highlighted fragment (if there is\n   * one), compute and set the readonly properties.\n   *\n   * The starting line number `x` and the ending line number `y` must satisfy:\n   * -   1 ≤ x, y ≤ {@link lines}.length\n   *   ==> 0 ≤ x < {@link lines}.length && 0 < y ≤ {@link lines}.length\n   * -   x ≤ y\n   *\n   * An alert is thrown if `# LINES` is matched at the start of the first line\n   * but `x` and `y` cannot be parsed or don't satisfy the conditions above\n   * (but not with e.g. `# LINES 1-2-3`).\n   * In this case, like when `# LINES` is not matched at the start of line 0,\n   * - {@link isExpandable} is set to false;\n   * - {@link highlightStart} is set to 0;\n   * - {@link highlightEnd} is set to {@link lines}.length.\n   */\n  // TODO unit test / use a proper parser\n  constructor(props: PythonCodeProps) {\n    super(props);\n\n    this.isExpandable = false;\n    this.lines = this.props.code.split('\\n');\n    this.highlightStart = 0;\n    this.highlightEnd = this.lines.length;\n\n    if (this.lines.length > 0) {\n      // Parse \"LINES x-y\".\n      const fragments = this.lines[0].split('# LINES ');\n      if (fragments.length === 2) { // '# LINES x-y' -> ['', 'x-y']\n        const lineNumbers = fragments[1].split('-');\n        const start = parseInt(lineNumbers[0]);\n        const end = parseInt(lineNumbers[1]);\n\n        function isLineNumberValid(lineNumber: number, name: string, maxValue: number): boolean {\n          if (isNaN(lineNumber)) {\n            alert(`Failed to parse ${name}: ${lineNumber}`);\n            return false;\n          }\n          if (lineNumber < 1) {\n            alert(`${name} must be at least 1: ${lineNumber}`);\n            return false;\n          }\n          if (lineNumber > maxValue) {\n            alert(`${name} must not exceed the biggest line number ${maxValue}`);\n            return false;\n          }\n\n          return true;\n        }\n\n        if (isLineNumberValid(start, 'Starting line', this.lines.length)\n          && isLineNumberValid(end, 'Ending line', this.lines.length)) {\n          if (start <= end) {\n            this.highlightStart = start - 1; // indexing from 0\n            this.highlightEnd = end - 1 + 1; // end included\n            this.isExpandable = true;\n          } else {\n            alert(`The starting line number must be at least the ending line number, but got ${start} < ${end}`);\n          }\n        }\n      }\n    }\n\n    this.highlightedLines = this.lines.slice(this.highlightStart, this.highlightEnd);\n\n    this.state = {\n      isExpanded: !this.isExpandable,\n      output: '',\n    };\n  }\n\n  /**\n   * Toggle between viewing the full example code and the highlighted fragment,\n   * by toggling {@link PythonCodeState.isExpanded}.\n   */\n  onToggleExpand(): void {\n    this.setState({isExpanded: !this.state.isExpanded});\n  }\n\n  /**\n   * Run the whole {@link PythonCodeProps.code}, clear the old output and store\n   * the normal output / error messages other than `KeyboardInterrupt` in\n   * {@link PythonCodeState.output} to be displayed.\n   * Upon termination, {@link PythonCodeProps.onRunFinished} is invoked to\n   * update the state of the app, so that the buttons are greyed out or re-\n   * enabled as appropriate.\n   */\n  async onRun(): Promise<void> {\n    this.setState({\n      output: '',\n    });\n    if (!this.props.canRun()) {\n      alert('UI lied: Device is NOT free');\n      this.props.onRunFinished();\n      return;\n    }\n\n    const outputStream = await this.props.onRun(this.props.code);\n    let currentOutput = '';\n    await outputStream.forEach((output) => {\n      switch (output.kind) {\n        case 'NormalOutput':\n          currentOutput = output.outputChunk;\n          break;\n        case 'ErrorMessage':\n          if (output.type === 'KeyboardInterrupt') break;\n          currentOutput = `${currentOutput}Error on line ${output.line}:\n${output.type}: ${output.message}`;\n      }\n      this.setState({\n        output: currentOutput,\n      });\n    });\n    this.props.onRunFinished();\n  }\n\n  /**\n   * Insert the highlighted fragment {@link lines}[{@link highlightStart},\n   * {@link highlightEnd}) into the editor through\n   * {@link PythonCodeProps.onInsertIntoEditor}.\n   */\n  onInsertIntoEditor(): void {\n    this.props.onInsertIntoEditor(this.highlightedLines.join('\\n'));\n  }\n\n  /**\n   * Compute the displayed text.\n   *\n   * - If {@link PythonCodeState.isExpanded} is true, this is the entirety of\n   *   the {@link lines} (joined with new lines);\n   * - otherwise, this is the {@link highlightedLines} with `# ...` shown at\n   *   either end if there are lines of code folded there.\n   */\n  getDisplayedText(): string {\n    let lines;\n\n    if (this.state.isExpanded) {\n      lines = this.lines;\n    } else {\n      lines = this.highlightedLines;\n\n      if (this.highlightStart > 0) {\n        lines = ['# ...', ...lines];\n      }\n      if (this.highlightEnd < this.lines.length) {\n        lines = [...lines, '# ...'];\n      }\n    }\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * A quirky feature: line numbers are only shown when the full code is shown.\n   * (And when the the meta-comment is missing and the fragment is the whole\n   *  code, {@link PythonCodeState.isExpanded} is set to true, thus showing the\n   *  line numbers by default without offering the ability to toggle the view.)\n   *\n   * Incidentally, showing the line numbers makes it harder to copy the code:\n   * the line numbers are also copied. This could be a feature in that it\n   * prevents the students from copying code other than the lines that we wish\n   * to highlight and for them to insert into the editor.\n   */\n  render(): JSX.Element {\n    return <div>\n      <SyntaxHighlighter\n        style={darcula}\n        language=\"py\"\n        showLineNumbers={this.state.isExpanded}\n      >\n        {this.getDisplayedText()}\n      </SyntaxHighlighter>\n\n      <div className=\"Tutorial-code-buttonbar\">\n        <Button\n          className=\"Tutorial-code-buttons\"\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<PlayArrow/>}\n          disabled={!this.props.canRun()}\n          onClick={this.onRun.bind(this)}\n        >\n          Run Example\n        </Button>\n\n        {\n          this.isExpandable &&\n          <Button\n            className=\"Tutorial-code-buttons\"\n            variant=\"contained\"\n            endIcon={this.state.isExpanded ? <Visibility/> : <VisibilityOff/>}\n            onClick={this.onToggleExpand.bind(this)}\n          >\n            Full Code:\n          </Button>\n        }\n\n        <Button\n          className=\"Tutorial-code-buttons\"\n          variant=\"contained\"\n          color=\"secondary\"\n          endIcon={<DoubleArrow/>}\n          disabled={!this.props.canInsertIntoEditor()}\n          onClick={this.onInsertIntoEditor.bind(this)}\n        >\n          Insert Fragment\n        </Button>\n      </div>\n\n      {this.state.output.length > 0 &&\n      <div className=\"Tutorial-output\">\n        {this.state.output}\n      </div>\n      }\n    </div>;\n  }\n}\n\ninterface PythonCodeProps {\n  code: string,\n\n  onRun(code: string): Promise<Stream<MicrobitOutput>>,\n\n  onRunFinished(): void,\n\n  canRun(): boolean,\n\n  onInsertIntoEditor(codeSnippet: string): void,\n\n  canInsertIntoEditor(): boolean,\n}\n\n\ninterface PythonCodeState {\n  isExpanded: boolean,\n  output: string,\n}\n\n\n/**\n * Renders the tutorial from the supplied {@link TutorialViewerProps.markdown}.\n *\n * The code blocks in markdown are rendered with syntax highlighting.\n * In particular, code blocks whose language is 'py', such as\n *\n * ~~~py\n * print('Hello, world')\n * ~~~\n *\n * or\n *\n * ```py\n * print('Hello world!')\n * ```\n *\n * are rendered with\n * - a run button which, enabled if {@link TutorialViewerProps.canRun} returns\n *   true, runs the code in this code block with\n *   {@link TutorialViewerProps.onRun};\n * - an insert into editor button which, enabled if\n *   {@link TutorialViewerProps.canInsertIntoEditor} returns true, inserts (a\n *   subset of, see below) the code in this code block into the editor with\n *   {@link TutorialViewerProps.onInsertIntoEditor}.\n *\n * Furthermore, if the first line of code is a comment of the format\n * `# LINES x-y` where `x`, `y` are integers satisfying 0 ≤ `x` ≤ `y` ≤ #lines,\n * such as\n *\n * ~~~py\n * # LINES 1-2\n * print(1)\n * print(2)\n * print(3)\n * ~~~\n *\n * then by default only the code fragment is shown, and now a button to toggle\n * between showing the full code and only the highlighted fragment is\n * available.\n * Also, only the highlighted fragmented is inserted now; see\n * {@link PythonCode} for the details.\n *\n */\nexport default class TutorialViewer extends React.Component<TutorialViewerProps, unknown> {\n  renderCode(code: MarkdownCode): JSX.Element {\n    if (code.language === 'py') {\n      return <PythonCode\n        code={code.value}\n        onRun={this.props.onRun}\n        onRunFinished={this.props.onRunFinished}\n        onInsertIntoEditor={this.props.onInsertIntoEditor}\n        canRun={this.props.canRun}\n        canInsertIntoEditor={this.props.canInsertInsertIntoEditor}\n      />;\n    } else {\n      return <SyntaxHighlighter\n        style={darcula}\n        language={code.language}\n      >\n        {code.value}\n      </SyntaxHighlighter>;\n    }\n  }\n\n  renderers = {code: this.renderCode.bind(this)};\n\n  render(): JSX.Element {\n    return <ReactMarkdown className=\"Tutorial-markdown\" renderers={this.renderers}>\n      {this.props.markdown}\n    </ReactMarkdown>;\n  }\n}\n\ninterface TutorialViewerProps {\n  markdown: string,\n\n  onRun(code: string): Promise<Stream<MicrobitOutput>>,\n\n  onRunFinished(): void,\n\n  canRun(): boolean,\n\n  onInsertIntoEditor(codeSnippet: string): void,\n\n  canInsertInsertIntoEditor(): boolean,\n}\n\ninterface MarkdownCode {\n  /** The language of the code block, specified by e.g. ```py ...``` */\n  language: string,\n  /** The contents of the code block */\n  value: string,\n}\n\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { Button } from '@material-ui/core';\nimport Editor, { loader, Monaco } from '@monaco-editor/react';\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport React from 'react';\nimport { Stream } from 'ts-stream';\nimport {\n  checkCompatability,\n  connectByPariedDevice,\n  connectByPlugIn,\n  connectBySelection\n} from '../api/microbit/impl/connect';\nimport { FailedConnection, MicrobitConnection, MicrobitOutput, MicrobitState } from '../api/microbit/interface/message';\nimport DuckViewer from '../duck-code';\nimport { Tutorial, TutorialList, TutorialLocation, TutorialResolver } from '../tutorial';\nimport './APIDemo.css';\nimport { SideBar } from './SideBar';\nimport TutorialViewer from './TutorialViewer';\n\ninterface APIDemoProps {\n  tutorialList: TutorialList\n  tutorialResolver: TutorialResolver\n}\n\ninterface APIDemoState {\n  /** The tutorial being displayed. null if the tutorial is unavailable. */\n  tutorial: Tutorial | null,\n\n  /** Output from the micro:bit serial */\n  output: string,\n\n  /** Active connection to the micro:bit */\n  connection: MicrobitConnection | null,\n\n  needDuck: boolean,\n\n  editor: monaco.editor.IStandaloneCodeEditor | null,\n  monaco: Monaco | null,\n\n  /** The most recent error message for the user, if one exists (otherwise, empty string) */\n  errorString: string,\n  errorLine: number,\n  errorMonacoIDs: string[] | null\n}\n\nconst exampleCode = \n`# Add your Python code here. E.g.\nfrom microbit import *\n\nwhile True:\n    display.scroll('Hello, World!')\n    display.show(Image.HEART)\n    sleep(2000)\n`;\n\nclass APIDemo extends React.Component<APIDemoProps, APIDemoState> {\n  constructor(props: APIDemoProps) {\n    super(props);\n    this.state = {\n      tutorial: null,\n      output: '',\n      connection: null,\n      editor: null,\n      monaco: null,\n      needDuck: false,\n      errorString: '',\n      errorLine: 0,\n      errorMonacoIDs: null\n    };\n    if (!checkCompatability()) alert('Browser not supported');\n\n    loader.init().then(t => {\n      console.log(t);\n    });\n    this.beforeExecution = this.beforeExecution.bind(this);\n  }\n\n  async handleTutorialPathChange(newLocation: TutorialLocation): Promise<void> {\n    const tutorial = await this.props.tutorialResolver.resolve(newLocation);\n\n    if (tutorial !== null) {\n      this.setState({ tutorial });\n    } else {\n      alert('Failed to access tutorial. Please try again later.');\n    }\n  }\n\n  async componentDidMount(): Promise<void> {\n    // Fetch a default tutorial once mounted.\n    await this.handleTutorialPathChange(this.props.tutorialList.default);\n  }\n\n  /**\n   * Called once the Monaco editor is mounted to set\n   * {@link APIDemoState.editor} and {@link APIDemoState.monaco}.\n   */\n  handleEditorDidMount(editor: monaco.editor.IStandaloneCodeEditor, monaco: Monaco): void {\n    this.setState({\n      editor: editor,\n      monaco: monaco,\n    });\n\n    const fetchCompletions = async (prefix: string) => {\n      if (this.hasFreeConnection()) {\n        return this.state.connection!.interact.getCompletions(prefix);\n      } else return [];\n    };\n\n    monaco.languages.registerCompletionItemProvider(\n      'python',\n      {\n        triggerCharacters: ['_', '.', '(', '['],\n        async provideCompletionItems(model, position, _, __) {\n          const line = model.getLineContent(position.lineNumber);\n          let j = position.column - 1;\n          while (j >= 0 && line[j] !== ' ') j -= 1;\n          const startColumn = j + 1;\n          const word = line.slice(startColumn, position.column - 1);\n\n          const completions = await fetchCompletions(word);\n          // Two issues here:\n          // 1. 'help(d' -> 'help(display' --- need to replace the entire word\n          // 2. 'b' -> 'button_', to be completed again\n          if (completions.length === 1) {\n            const completion = completions[0];\n            const wordRange = {\n              startColumn: startColumn + 1,\n              endColumn: position.column,\n              startLineNumber: position.lineNumber,\n              endLineNumber: position.lineNumber,\n            };\n\n            // Deals with case 1\n            if (!completion.endsWith('_')) {\n              return {\n                suggestions: [{\n                  kind: monaco.languages.CompletionItemKind.Constant,\n                  label: completion,\n                  insertText: completion,\n                  range: wordRange,\n                }],\n              };\n            }\n\n            // Deals with case 2 (and 1)\n            return {\n              suggestions: [{\n                kind: monaco.languages.CompletionItemKind.Constant,\n                label: completion,\n                range: wordRange,\n                // hack to insert '_' to trigger another completion\n                insertText: completion.slice(0, -1),\n                // additionalTextEdits: [{\n                //   range: {},\n                //   text: '_',\n                // }],\n              }]\n            };\n          }\n          return {\n            suggestions: completions.map((suggestion) => {\n              return {\n                kind: monaco.languages.CompletionItemKind.Constant,\n                label: suggestion,\n                insertText: suggestion,\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              } as any;\n            }),\n          };\n        }\n      },\n    );\n  }\n\n  /**\n   * @summary Disconnect the micro:bit before unmounting.\n   *\n   * For dev purposes only: upon recompilation, this component loses access to\n   * the {@link APIDemoState.connection} object; if the web serial connection\n   * is not terminated here, the page must needs to be refreshed to reclaim the\n   * micro:bit interface.\n   *\n   * In production, {@link APIDemo} is intended to be the top-level component\n   * to be dismounted only when the page is closed, after which the web serial\n   * connection is terminated anyways, making it unnecessary to manually invoke\n   * the disconnection procedure.\n   */\n  componentWillUnmount(): void {\n    this.state.connection?.interact.disconnect();\n  }\n\n  /**\n   * @summary Renders a button in the header of the app.\n   *\n   * The 'Start' button is enabled only when {@link APIDemoState.connection} is null,\n   * as it is intended to be used when:\n   * - the user first opens the page, and connects the micro:bit\n   * - the micro:bit is disconnected, and the user wants to reconnect it (or to\n   *   connect another one)\n   *\n   * {@link MicrobitState.Busy} and {@link MicrobitState.Free} document when\n   * the other micro:bit related buttons are enabled.\n   * In addition, since the 'Flash' and 'Run' buttons in the header requires\n   * access to the code in the editor, they are enabled only when\n   * {@link isEditorMounted} returns true.\n   *\n   * The duck 'Help' button is always enabled.\n   */\n  renderHeaderButton(text: string, callback: () => void, isEnabled: () => boolean): JSX.Element {\n    const safeOnClickCallback = () => {\n      if (isEnabled()) {\n        callback();\n      } else {\n        alert(`UI lied: button ${text} should NOT be enabled`);\n        this.setState({});\n      }\n    };\n\n    return (\n      <Button\n        className=\"APIDemo-button\"\n        variant=\"contained\"\n        size=\"large\"\n        disabled={!isEnabled()}\n        onClick={safeOnClickCallback}\n      >\n        {text}\n      </Button>\n    );\n  }\n\n  /**\n   * Return true if the state of {@link APIDemoState.connection} is\n   * {@link MicrobitState.Free}, and false otherwise.\n   */\n  hasFreeConnection(): boolean {\n    return this.state.connection?.interact.getState() === MicrobitState.Free;\n  }\n\n  /**\n   * Return true if the state of {@link APIDemoState.connection} is\n   * {@link MicrobitState.Busy}, and false otherwise.\n   */\n  hasBusyConnection(): boolean {\n    return this.state.connection?.interact.getState() === MicrobitState.Busy;\n  }\n\n  /**\n   * Return true if {@link APIDemoState.editor} has been assigned.\n   */\n  isEditorMounted(): boolean {\n    return this.state.editor != null;\n  }\n\n  /**\n   * @param md the text from the markdown file of the tutorial\n   * @returns the code of md\n   */\n  getTuteCode(md: string): string {\n    const lines = md.split('\\n');\n    const code = [];\n    let i = 0;\n\n    while (i < lines.length) {\n      if (lines[i].slice(0, 5) === '```py') {\n        i++;\n        while (lines[i].slice(0, 3) !== '```') {\n          code.push(lines[i]);\n          i++;\n        }\n      } else if (lines[i].slice(0, 5) === '~~~py') {\n        i++;\n        while (lines[i].slice(0, 3) !== '~~~') {\n          code.push(lines[i]);\n          i++;\n        }\n      }\n      i++;\n    }\n\n    return code.join('\\n');\n  }\n\n  /**\n   * Renders the duck, passing in the line number and line text \n   * of the Python error message, if one exists.\n   */\n  renderDuck(): JSX.Element {\n    const tutorialCode = this.getTuteCode(this.state.tutorial?.raw_content ?? '');\n\n    return (this.state.errorString === '' || this.state.tutorial?.disable_duck) ? \n      <DuckViewer\n        closeDuck={this.exileDuck.bind(this)}\n        tutorialCode={tutorialCode}\n      /> : \n      <DuckViewer \n        closeDuck={this.exileDuck.bind(this)}\n        lineNumber={this.state.errorLine}\n        lineText={this.state.editor!.getValue().split('\\n')[this.state.errorLine - 1]}\n        tutorialCode={tutorialCode}\n      />\n    ;\n  }\n\n  /**\n   * Render {@link APIDemoState.tutorial} with {@link TutorialViewer} unless\n   * {@link APIDemoState.needDuck} is true, in which case\n   * {@link APIDemoState.errorString} and the duck (via {@link renderDuck}) are\n   * rendered instead.\n   */\n  renderTutorial(): JSX.Element {\n    return <div className=\"APIDemo-tutorial\">\n      {this.state.needDuck\n        ? <div>\n          <h1>\n            {this.state.errorString}\n          </h1>\n          {this.renderDuck()}\n        </div>\n        : <TutorialViewer\n          markdown={this.state.tutorial?.raw_content ?? '# Fetching tutorial...'}\n          onRun={this.onRunCell.bind(this)}\n          onRunFinished={() => this.setState({})}\n          canRun={this.hasFreeConnection.bind(this)}\n          onInsertIntoEditor={this.onInsertIntoEditor.bind(this)}\n          canInsertInsertIntoEditor={this.isEditorMounted.bind(this)}\n        />\n      }\n    </div>;\n  }\n\n  /**\n   * Render the python code editor.\n   *\n   * The default code is {@link exampleCode}.\n   * The current code can be accessed via {@link APIDemoState.editor}.\n   */\n  renderEditor(): JSX.Element {\n    return (\n      <Editor\n        defaultLanguage=\"python\"\n        defaultValue={exampleCode}\n        onMount={this.handleEditorDidMount.bind(this)}\n        theme='light'\n        options={{\n          minimap: {\n            enabled: false,\n          },\n          fontSize: 18,\n        }}\n        wrapperClassName=\"APIDemo-code\"\n      />\n    );\n  }\n\n  /**\n   * Render a text box displaying {@link APIDemoState.output}.\n   */\n  renderOutput(): JSX.Element {\n    return (\n      <textarea\n        className=\"APIDemo-output\"\n        value={this.state.output}\n        readOnly\n      />\n    );\n  }\n\n  render(): JSX.Element {\n    return (\n      <div className=\"APIDemo\">\n        <div className=\"APIDemo-header\">\n          <header className=\"APIDemo-header-buttons\">\n            {this.renderHeaderButton(\n              'Start',\n              this.onStart.bind(this),\n              () => this.state.connection == null,\n            )}\n            {this.renderHeaderButton(\n              'Flash',\n              () => this.onFlash(this.state.editor!.getValue()),\n              () => this.isEditorMounted() && this.hasFreeConnection(),\n            )}\n            {this.renderHeaderButton(\n              'Run',\n              () => this.onRun(this.state.editor!.getValue()),\n              () => this.isEditorMounted() && this.hasFreeConnection(),\n            )}\n            {this.renderHeaderButton(\n              'Interrupt',\n              this.onInterrupt.bind(this),\n              () => this.hasBusyConnection(),\n            )}\n            {this.renderHeaderButton(\n              'Reboot',\n              this.onReboot.bind(this),\n              () => this.hasFreeConnection(),\n            )}\n            {this.renderHeaderButton(\n              'Help',\n              this.summonDuck.bind(this),\n              () => true,\n            )}\n          </header>\n          <SideBar tutorialList={this.props.tutorialList} onTutorialSelection={this.handleTutorialPathChange.bind(this)} />\n        </div>\n        <div className=\"APIDemo-body\">\n          {this.renderTutorial()}\n          {this.renderEditor()}\n          {this.renderOutput()}\n        </div>\n      </div>\n    );\n  }\n\n  async connect(connection: Promise<MicrobitConnection | FailedConnection>): Promise<boolean> {\n    const c = await connection;\n    switch (c.kind) {\n      case 'ConnectionFailure':\n        alert(c.reason);\n        return false;\n      case 'MicrobitConnection':\n        this.setState({connection: c});\n        c.disconnection.then(async () => {\n          alert('Serial disconnected');\n          this.setState({connection: null}, async () => {\n            await this.connect(connectByPlugIn());\n            alert('Serial reconnected');\n          });\n        });\n        return true;\n    }\n  }\n\n  /**\n   * Insert the code snippet into {@link APIDemoState.editor} at the cursor.\n   * (If the user has never focused on the monaco editor before, the cursor is\n   * actually placed on the top left, so the snippet is inserted at the very\n   * start of the text.)\n   * Then, the cursor is placed after the inserted text which becomes selected.\n   * Also, the insertion operation is pushed onto the buffer and may be undone.\n   * Finally, the editor gets the focus.\n   */\n  onInsertIntoEditor(codeSnippet: string): void {\n    const editor = this.state.editor;\n    if (editor == null) {\n      alert('Editor is not loaded');\n      return;\n    }\n\n    const selection = editor.getSelection();\n    if (selection == null) { // Never happened\n      alert('selection is null');\n      return;\n    }\n    const position = selection.getPosition();\n    const range: monaco.IRange = {\n      startLineNumber: position.lineNumber,\n      endLineNumber: position.lineNumber,\n      startColumn: position.column,\n      endColumn: position.column,\n    };\n    editor.getModel()?.pushEditOperations(\n      [selection],\n      [\n        {\n          range,\n          text: codeSnippet,\n        }\n      ],\n      (_) => null,\n    ); // second parameter set to true to enable undo's\n    editor.focus();\n  }\n\n  /**\n   * Make the Duck appear, in place of the tutorial\n  */\n  summonDuck(): void {\n    this.setState({needDuck: true});\n  }\n\n  /**\n   * Make the Duck disappear, the tutorial takes its place.\n  */\n  exileDuck(): void {\n    this.setState({needDuck: false});\n  }\n\n  async onStart(): Promise<void> {\n    if (!(await this.connect(connectByPariedDevice())))\n      await this.connect(connectBySelection());\n    //this.connect(connectByPlugIn());\n  }\n\n  beforeExecution(): void {\n    const editor = this.state.editor!;\n    const ids = this.state.errorMonacoIDs;\n    editor.updateOptions({\n      readOnly: true\n    });\n    if (ids != null) {\n      this.exileDuck();\n      editor.deltaDecorations(ids, []);\n      this.setState({\n        errorMonacoIDs: null\n      });\n    }\n  }\n\n  async onExec(outputStream: Stream<MicrobitOutput>): Promise<void> {\n    // Notify the device that the connected micro:bit is now busy\n    this.setState({});\n\n    await outputStream.forEach(output => {\n      switch (output.kind) {\n        case 'NormalOutput':\n          this.setState({\n            output: output.outputChunk,\n            errorString: ''\n          });\n          break;\n        case 'ResetPressed':\n          console.log('ResetPressed');\n          break;\n        case 'ErrorMessage':\n          if (output.type !== 'KeyboardInterrupt') {\n            console.log(output.message);\n            const editor = this.state.editor!;\n            const errorMonacoID = editor.deltaDecorations([],\n              [\n                {\n                  range: new monaco.Range(output.line, 1, output.line, 1),\n                  options: {\n                    isWholeLine: true,\n                    className: 'Monaco-Error-Line-Of-Code'\n                  }\n                },\n              ]\n            );\n            this.setState({\n              errorString: 'Error on line ' + output.line + ':\\n' + output.type + ': ' + output.message,\n              errorLine: output.line,\n              errorMonacoIDs: errorMonacoID\n            });\n            editor.updateOptions({\n              readOnly: false\n            });\n            this.summonDuck();\n          }\n      }\n    });\n    // Notify the app that the connection has freed up\n    this.setState({});\n    this.state.editor?.updateOptions({\n      readOnly: false\n    });\n  }\n\n  async onFlash(code: string): Promise<void> {\n    console.log('onFlash');\n    this.beforeExecution();\n    await this.onExec(await this.state.connection!.interact.flash(code));\n  }\n\n  async onRun(code: string): Promise<void> {\n    console.log('onRun');\n    this.beforeExecution();\n    await this.onExec(await this.state.connection!.interact.execute(code));\n  }\n\n  /**\n   * Execute the supplied code, and return a promise resolving to the output\n   * stream of the micro:bit running the code.\n   */\n  async onRunCell(code: string): Promise<Stream<MicrobitOutput>> {\n    console.log('onRunCell');\n    return await this.state.connection!.interact.execute(code);\n  }\n\n  async onReboot(): Promise<void> {\n    console.log('onReboot');\n    this.beforeExecution();\n    await this.onExec(await this.state.connection!.interact.reboot());\n  }\n\n  async onInterrupt(): Promise<void> {\n    await this.state.connection!.interact.interrupt();\n\n    // Notify the app that the connection has freed up\n    this.setState({});\n  }\n}\n\nexport default APIDemo;\n","import { TutorialList } from '../tutorial';\n\n/**\n * A module declaring the list of available tutorials.\n *\n * All tutorials are supposed to be placed under the path /public/tutorials/,\n * and locations are to be specified relative to this path.\n */\n\nconst pythonTute = { path: 'PythonTute.md', title: 'Python Language Features' };\n\nexport const defaultTutorialList: TutorialList = {\n  default : pythonTute,\n  list: [\n    pythonTute,\n    { path: 'ErrorTute.md', title: 'Python Errors' },\n    { path: 'DisplayTute.md', title: 'Displaying Images on micro:bit' },\n  ]\n};\n","/**\n * A module concerning tutorial definitions.\n */\n\n/**\n * An object containing information about a single tutorial\n */\nexport interface Tutorial {\n  /**\n   * content of the tutorial; supposed to be in a Markdown format.\n   */\n  readonly raw_content: string\n\n  /**\n   * An optional field that, when set to true, prevents the Duck from popping up when encountering an error.\n   */\n  readonly disable_duck?: boolean\n}\n\n/**\n * An entry specifying the location of the tutorial along with its title.\n */\nexport interface TutorialLocation {\n  /**\n   * Title for the tutorial, to be shown on the side-menu\n   */\n  readonly title: string\n\n  /**\n   * Path of the tutorial response, relative to /public/tutorials/.\n   */\n  readonly path: string\n}\n\n/**\n * Collection of tutorials, along with a default tutorial to display next to the editor.\n */\nexport interface TutorialList {\n  readonly default: TutorialLocation\n  readonly list: TutorialLocation[]\n}\n\nexport interface TutorialResolver {\n\n  /**\n   * Resolves a tutorial from the location.\n   * The returned promise always succeeds, either with a valid tutorial content or a null (when not found etc.)\n   */\n  resolve(location: TutorialLocation): Promise<Tutorial | null>\n\n}\n\n/**\n * A default resolver for a tutorial that fetches tutorial from /public/tutorials.\n * \n * This resolver assumes that the editor HTML is at a parent directory of /tutorials at runtime.\n */\nexport const publicTutorialResolver: TutorialResolver = {\n  async resolve(location: TutorialLocation): Promise<Tutorial | null> {\n    try {\n      const response = await fetch(`./tutorials/${location.path}`);\n\n      return response.ok ? {\n        raw_content: await response.text(),\n        disable_duck: location.path === 'ErrorTute.md'\n      } : null;\n    } catch (err) {\n      console.log(err);\n      return null;\n    }\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport APIDemo from './components/APIDemo';\nimport './index.css';\nimport { defaultTutorialList } from './resources/tutorial_list';\nimport { publicTutorialResolver } from './tutorial';\n\nReactDOM.render(\n  <React.StrictMode>\n    <APIDemo tutorialList={defaultTutorialList} tutorialResolver={publicTutorialResolver}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}